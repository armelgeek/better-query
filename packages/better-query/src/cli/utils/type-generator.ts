import path from "path";
import fs from "fs/promises";

export async function generateTypes(configPath: string): Promise<string> {
	try {
		// For now, we'll generate basic types based on the config file
		// In a real implementation, this would parse the actual betterQuery configuration

		const configContent = await fs.readFile(configPath, "utf8");

		// Extract resource names and schemas from the config
		// This is a simplified implementation
		const resourceMatches =
			configContent.match(/createResource\(\s*{\s*name:\s*["']([^"']+)["']/g) ||
			[];
		const resourceNames = resourceMatches
			.map((match) => {
				const nameMatch = match.match(/name:\s*["']([^"']+)["']/);
				return nameMatch ? nameMatch[1] : "";
			})
			.filter(Boolean);

		let generatedTypes = `// Generated by Better Query CLI
// Do not edit this file manually

export interface QueryClient {
`;

		// Generate client interface with resource methods
		for (const resourceName of resourceNames) {
			const capitalizedName =
				resourceName.charAt(0).toUpperCase() + resourceName.slice(1);
			generatedTypes += `  ${resourceName}: {
    create: (data: Create${capitalizedName}Input) => Promise<${capitalizedName}>;
    update: (id: string, data: Update${capitalizedName}Input) => Promise<${capitalizedName}>;
    delete: (id: string) => Promise<void>;
    findById: (id: string) => Promise<${capitalizedName} | null>;
    list: (params?: ListParams) => Promise<ListResult<${capitalizedName}>>;
  };
`;
		}

		generatedTypes += `}

export interface ListParams {
  page?: number;
  limit?: number;
  search?: string;
  sort?: string;
  order?: 'asc' | 'desc';
}

export interface ListResult<T> {
  data: T[];
  total: number;
  page: number;
  limit: number;
  hasMore: boolean;
}

`;

		// Generate base types for each resource
		for (const resourceName of resourceNames) {
			const capitalizedName =
				resourceName.charAt(0).toUpperCase() + resourceName.slice(1);
			generatedTypes += `export interface ${capitalizedName} {
  id: string;
  createdAt: Date;
  updatedAt: Date;
  // Add your specific fields here
}

export interface Create${capitalizedName}Input {
  // Add your specific fields here
}

export interface Update${capitalizedName}Input {
  // Add your specific fields here
}

`;
		}

		return generatedTypes;
	} catch (error) {
		throw new Error(`Failed to generate types: ${error}`);
	}
}
