{
  "name": "saved-queries",
  "type": "components:ui",
  "category": "ui",
  "description": "Saved query filters",
  "dependencies": {
    "shadcn": [
      "dropdown-menu",
      "button"
    ],
    "npm": []
  },
  "registryDependencies": [],
  "files": [
    {
      "path": "components/admin/saved-queries.tsx",
      "content": "import { useListContext, useTranslate } from \"ra-core\";\nimport { ChangeEvent, FormEvent, ReactElement, useState } from \"react\";\nimport isEqual from \"lodash/isEqual\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  extractValidSavedQueries,\n  useSavedQueries,\n} from \"@/hooks/saved-queries.tsx\";\n\nexport const AddSavedQueryDialog = ({\n  open,\n  onClose,\n}: AddSavedQueryDialogProps): ReactElement => {\n  const translate = useTranslate();\n  const { resource, filterValues, displayedFilters, sort, perPage } =\n    useListContext();\n\n  const [savedQueries, setSavedQueries] = useSavedQueries(resource);\n\n  // input state\n  const [queryName, setQueryName] = useState(\"\");\n  const handleQueryNameChange = (\n    event: ChangeEvent<HTMLInputElement>,\n  ): void => {\n    setQueryName(event.target.value);\n  };\n\n  const handleFormSubmit = (e: FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    addQuery();\n  };\n\n  const addQuery = (): void => {\n    const newSavedQuery = {\n      label: queryName,\n      value: {\n        filter: filterValues,\n        sort,\n        perPage,\n        displayedFilters,\n      },\n    };\n    const newSavedQueries = extractValidSavedQueries(savedQueries);\n    setSavedQueries(newSavedQueries.concat(newSavedQuery));\n    setQueryName(\"\");\n    onClose();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>\n            {translate(\"ra.saved_queries.new_dialog_title\", {\n              _: \"Save current query as\",\n            })}\n          </DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleFormSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"name\">\n              {translate(\"ra.saved_queries.query_name\", {\n                _: \"Query name\",\n              })}\n            </Label>\n            <Input\n              id=\"name\"\n              value={queryName}\n              onChange={handleQueryNameChange}\n              autoFocus\n            />\n          </div>\n        </form>\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={onClose}>\n            {translate(\"ra.action.cancel\")}\n          </Button>\n          <Button onClick={addQuery}>{translate(\"ra.action.save\")}</Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport interface AddSavedQueryDialogProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nexport const RemoveSavedQueryDialog = ({\n  open,\n  onClose,\n}: RemoveSavedQueryDialogProps): ReactElement => {\n  const translate = useTranslate();\n  const { resource, filterValues, sort, perPage, displayedFilters } =\n    useListContext();\n\n  const [savedQueries, setSavedQueries] = useSavedQueries(resource);\n\n  const removeQuery = (): void => {\n    const savedQueryToRemove = {\n      filter: filterValues,\n      sort,\n      perPage,\n      displayedFilters,\n    };\n\n    const newSavedQueries = extractValidSavedQueries(savedQueries);\n    const index = newSavedQueries.findIndex((savedFilter) =>\n      isEqual(savedFilter.value, savedQueryToRemove),\n    );\n    setSavedQueries([\n      ...newSavedQueries.slice(0, index),\n      ...newSavedQueries.slice(index + 1),\n    ]);\n    onClose();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>\n            {translate(\"ra.saved_queries.remove_dialog_title\", {\n              _: \"Remove saved query?\",\n            })}\n          </DialogTitle>\n          <DialogDescription>\n            {translate(\"ra.saved_queries.remove_message\", {\n              _: \"Are you sure you want to remove that item from your list of saved queries?\",\n            })}\n          </DialogDescription>\n        </DialogHeader>\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={onClose}>\n            {translate(\"ra.action.cancel\")}\n          </Button>\n          <Button onClick={removeQuery} autoFocus>\n            {translate(\"ra.action.confirm\")}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport interface RemoveSavedQueryDialogProps {\n  open: boolean;\n  onClose: () => void;\n}\n",
      "type": "components:ui"
    }
  ],
  "tailwind": {
    "config": {}
  }
}