{
	"name": "show-guesser",
	"type": "components:ui",
	"category": "views",
	"description": "Auto-generate show views",
	"dependencies": {
		"shadcn": ["card", "separator"],
		"npm": []
	},
	"registryDependencies": [],
	"files": [
		{
			"path": "components/admin/show-guesser.tsx",
			"content": "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  ReactNode,\n  useEffect,\n  useState,\n  isValidElement,\n  Children,\n} from \"react\";\nimport {\n  ShowBase,\n  InferredElement,\n  getElementsFromRecords,\n  useResourceContext,\n  useShowContext,\n  InferredTypeMap,\n} from \"ra-core\";\nimport { capitalize, singularize } from \"inflection\";\nimport { ShowView } from \"@/components/admin/show\";\nimport { RecordField } from \"@/components/admin/record-field\";\nimport { DateField } from \"./date-field\";\nimport { ReferenceField } from \"@/components/admin/reference-field\";\nimport { NumberField } from \"@/components/admin/number-field\";\nimport { ArrayField } from \"@/components/admin/array-field\";\nimport { BadgeField } from \"@/components/admin/badge-field\";\nimport { SingleFieldList } from \"@/components/admin/single-field-list\";\nimport { ReferenceArrayField } from \"@/components/admin/reference-array-field\";\n\nexport const ShowGuesser = (props: { enableLog?: boolean }) => (\n  <ShowBase>\n    <ShowViewGuesser {...props} />\n  </ShowBase>\n);\n\nconst ShowViewGuesser = (props: { enableLog?: boolean }) => {\n  const resource = useResourceContext();\n\n  if (!resource) {\n    throw new Error(`Cannot use <ShowGuesser> outside of a ResourceContext`);\n  }\n\n  const { record } = useShowContext();\n  const [child, setChild] = useState<ReactNode>(null);\n  const { enableLog = process.env.NODE_ENV === \"development\", ...rest } = props;\n\n  useEffect(() => {\n    setChild(null);\n  }, [resource]);\n\n  useEffect(() => {\n    if (record && !child) {\n      const inferredElements = getElementsFromRecords([record], showFieldTypes);\n      const inferredChild = new InferredElement(\n        showFieldTypes.show,\n        null,\n        inferredElements,\n      );\n      setChild(inferredChild.getElement());\n\n      if (!enableLog) return;\n\n      const representation = inferredChild.getRepresentation();\n      const components = [\"Show\"]\n        .concat(\n          Array.from(\n            new Set(\n              Array.from(representation.matchAll(/<([^/\\s>]+)/g))\n                .map((match) => match[1])\n                .filter(\n                  (component) => component !== \"span\" && component !== \"div\",\n                ),\n            ),\n          ),\n        )\n        .sort();\n\n      // eslint-disable-next-line no-console\n      console.log(\n        `Guessed Show:\n\n${components\n  .map(\n    (component) =>\n      `import { ${component} } from \"@/components/admin/${kebabCase(\n        component,\n      )}\";`,\n  )\n  .join(\"\\n\")}\n\nexport const ${capitalize(singularize(resource))}Show = () => (\n    <Show>\n${inferredChild.getRepresentation()}\n    </Show>\n);`,\n      );\n    }\n  }, [record, child, resource, enableLog]);\n\n  return <ShowView {...rest}>{child}</ShowView>;\n};\n\nconst showFieldTypes: InferredTypeMap = {\n  show: {\n    component: (props: any) => (\n      <div className=\"flex flex-col gap-4\">{props.children}</div>\n    ),\n    representation: (\n      _props: any,\n      children: { getRepresentation: () => string }[],\n    ) => `        <div className=\"flex flex-col gap-4\">\n${children\n  .map((child) => `            ${child.getRepresentation()}`)\n  .join(\"\\n\")}\n        </div>`,\n  },\n  reference: {\n    component: (props: any) => (\n      <RecordField source={props.source}>\n        <ReferenceField source={props.source} reference={props.reference} />\n      </RecordField>\n    ),\n    representation: (props: any) =>\n      `<RecordField source=\"${props.source}\">\n                <ReferenceField source=\"${props.source}\" reference=\"${props.reference}\" />\n            </RecordField>`,\n  },\n  array: {\n    component: ({ children, ...props }: any) => {\n      const childrenArray = Children.toArray(children);\n      return (\n        <RecordField source={props.source}>\n          <ArrayField source={props.source}>\n            <SingleFieldList>\n              <BadgeField\n                source={\n                  childrenArray.length > 0 &&\n                  isValidElement(childrenArray[0]) &&\n                  (childrenArray[0].props as any).source\n                }\n              />\n            </SingleFieldList>\n          </ArrayField>\n        </RecordField>\n      );\n    },\n    representation: (props: any, children: any) =>\n      `<RecordField source=\"${props.source}\">\n                <ArrayField source=\"${props.source}\">\n                    <SingleFieldList>\n                        <BadgeField source=\"${\n                          children.length > 0 && children[0].getProps().source\n                        }\" />\n                    </SingleFieldList>\n                </ArrayField>\n            </RecordField>`,\n  },\n  referenceArray: {\n    component: (props: any) => (\n      <RecordField source={props.source}>\n        <ReferenceArrayField {...props} />\n      </RecordField>\n    ),\n    representation: (props: any) =>\n      `<RecordField source=\"${props.source}\">\n                <ReferenceArrayField source=\"${props.source}\" reference=\"${props.reference}\" />\n            </RecordField>`,\n  },\n  boolean: {\n    component: (props: any) => (\n      <RecordField\n        source={props.source}\n        render={(record) => (record[props.source] ? \"Yes\" : \"No\")}\n      />\n    ),\n    representation: (props: any) =>\n      `<RecordField source=\"${props.source}\" render={record => record[${props.source}] ? 'Yes' : 'No'} />`,\n  },\n  date: {\n    component: (props: any) => (\n      <RecordField source={props.source}>\n        <DateField source={props.source} />\n      </RecordField>\n    ),\n    representation: (props: any) =>\n      `<RecordField source=\"${props.source}\">\n                <DateField source=\"${props.source}\" />\n            </RecordField>`,\n  },\n  number: {\n    component: (props: any) => (\n      <RecordField source={props.source}>\n        <NumberField source={props.source} />\n      </RecordField>\n    ),\n    representation: (props: any) =>\n      `<RecordField source=\"${props.source}\">\n                <NumberField source=\"${props.source}\" />\n            </RecordField>`,\n  },\n  string: {\n    component: (props: any) => <RecordField source={props.source} />,\n    representation: (props: any) => `<RecordField source=\"${props.source}\" />`,\n  },\n};\n\nconst kebabCase = (name: string) => {\n  return name\n    .replace(/([a-z])([A-Z])/g, \"$1-$2\")\n    .replace(/([A-Z])([A-Z][a-z])/g, \"$1-$2\")\n    .toLowerCase();\n};\n",
			"type": "components:ui"
		}
	],
	"tailwind": {
		"config": {}
	},
	"betterQuery": {
		"operations": ["get"],
		"hook": "useQuery(\"resource\").read(id)",
		"example": "const { data } = useQuery(\"resource\").read(id);\n// Use in component"
	}
}
