{
  "name": "edit",
  "type": "components:ui",
  "category": "layout",
  "description": "Edit record view",
  "dependencies": {
    "shadcn": [
      "card",
      "separator"
    ],
    "npm": []
  },
  "registryDependencies": [],
  "files": [
    {
      "path": "components/admin/edit.tsx",
      "content": "import {\n  EditBase,\n  EditBaseProps,\n  Translate,\n  useCreatePath,\n  useEditContext,\n  useGetRecordRepresentation,\n  useGetResourceLabel,\n  useHasDashboard,\n  useResourceContext,\n  useResourceDefinition,\n} from \"ra-core\";\nimport { ReactNode } from \"react\";\nimport { Link } from \"react-router\";\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbPage,\n} from \"@/components/admin/breadcrumb\";\nimport { cn } from \"@/lib/utils\";\nimport { ShowButton } from \"@/components/admin/show-button\";\nimport { DeleteButton } from \"./delete-button\";\n\nexport interface EditProps extends EditViewProps, EditBaseProps {}\n\nexport const Edit = ({\n  title,\n  children,\n  actions,\n  className,\n  ...rest\n}: EditProps) => (\n  <EditBase {...rest}>\n    <EditView title={title} actions={actions} className={className}>\n      {children}\n    </EditView>\n  </EditBase>\n);\n\nexport interface EditViewProps {\n  title?: ReactNode | string | false;\n  actions?: ReactNode;\n  children?: ReactNode;\n  className?: string;\n}\n\nexport const EditView = ({\n  title,\n  actions,\n  className,\n  children,\n}: EditViewProps) => {\n  const context = useEditContext();\n\n  const resource = useResourceContext();\n  if (!resource) {\n    throw new Error(\n      \"The EditView component must be used within a ResourceContextProvider\",\n    );\n  }\n  const getResourceLabel = useGetResourceLabel();\n  const listLabel = getResourceLabel(resource, 2);\n  const createPath = useCreatePath();\n  const listLink = createPath({\n    resource,\n    type: \"list\",\n  });\n\n  const getRecordRepresentation = useGetRecordRepresentation(resource);\n  const recordRepresentation = getRecordRepresentation(context.record);\n\n  const { hasShow } = useResourceDefinition({ resource });\n  const hasDashboard = useHasDashboard();\n\n  if (context.isLoading || !context.record) {\n    return null;\n  }\n\n  return (\n    <>\n      <Breadcrumb>\n        {hasDashboard && (\n          <BreadcrumbItem>\n            <Link to=\"/\">\n              <Translate i18nKey=\"ra.page.dashboard\">Home</Translate>\n            </Link>\n          </BreadcrumbItem>\n        )}\n        <BreadcrumbItem>\n          <Link to={listLink}>{listLabel}</Link>\n        </BreadcrumbItem>\n        <BreadcrumbPage>{recordRepresentation}</BreadcrumbPage>\n      </Breadcrumb>\n      <div\n        className={cn(\n          \"flex justify-between items-start flex-wrap gap-2 my-2\",\n          className,\n        )}\n      >\n        <h2 className=\"text-2xl font-bold tracking-tight\">\n          {title !== undefined ? title : context.defaultTitle}\n        </h2>\n        {actions ?? (\n          <div className=\"flex justify-end items-center gap-2\">\n            {hasShow ? <ShowButton /> : null}\n            <DeleteButton />\n          </div>\n        )}\n      </div>\n      <div className=\"my-2\">{children}</div>\n    </>\n  );\n};\n",
      "type": "components:ui"
    }
  ],
  "tailwind": {
    "config": {}
  },
  "betterQuery": {
    "operations": [
      "get",
      "update"
    ],
    "hook": "useQuery(\"resource\").read(id) / update()",
    "example": "const { data } = useQuery(\"resource\").read(id) / update();\n// Use in component"
  }
}