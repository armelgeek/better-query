{
  "name": "autocomplete-input",
  "type": "components:ui",
  "category": "forms",
  "description": "Autocomplete search input",
  "dependencies": {
    "shadcn": [
      "form",
      "input",
      "label",
      "button"
    ],
    "npm": []
  },
  "registryDependencies": [],
  "files": [
    {
      "path": "components/admin/autocomplete-input.tsx",
      "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport * as React from \"react\";\nimport { useCallback } from \"react\";\nimport { Check, ChevronsUpDown } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  FormControl,\n  FormError,\n  FormField,\n  FormLabel,\n} from \"@/components/admin/form\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport {\n  ChoicesProps,\n  InputProps,\n  useChoices,\n  useChoicesContext,\n  useGetRecordRepresentation,\n  useInput,\n  useTranslate,\n  FieldTitle,\n  useEvent,\n} from \"ra-core\";\nimport { InputHelperText } from \"./input-helper-text\";\nimport {\n  SupportCreateSuggestionOptions,\n  useSupportCreateSuggestion,\n} from \"@/hooks/useSupportCreateSuggestion\";\n\nexport const AutocompleteInput = (\n  props: Omit<InputProps, \"source\"> &\n    Omit<SupportCreateSuggestionOptions, \"handleChange\" | \"filter\"> &\n    Partial<Pick<InputProps, \"source\">> &\n    ChoicesProps & {\n      className?: string;\n      disableValue?: string;\n      filterToQuery?: (searchText: string) => any;\n      translateChoice?: boolean;\n      placeholder?: string;\n      inputText?:\n        | React.ReactNode\n        | ((option: any | undefined) => React.ReactNode);\n    },\n) => {\n  const {\n    filterToQuery = DefaultFilterToQuery,\n    inputText,\n    create,\n    createValue,\n    createLabel,\n    createHintValue,\n    createItemLabel,\n    onCreate,\n    optionText,\n  } = props;\n  const {\n    allChoices = [],\n    source,\n    resource,\n    isFromReference,\n    setFilters,\n  } = useChoicesContext(props);\n  const { id, field, isRequired } = useInput({ ...props, source });\n  const translate = useTranslate();\n  const { placeholder = translate(\"ra.action.search\", { _: \"Search...\" }) } =\n    props;\n\n  const getRecordRepresentation = useGetRecordRepresentation(resource);\n  const { getChoiceText, getChoiceValue } = useChoices({\n    optionText:\n      props.optionText ?? (isFromReference ? getRecordRepresentation : \"name\"),\n    optionValue: props.optionValue ?? \"id\",\n    disableValue: props.disableValue,\n    translateChoice: props.translateChoice ?? !isFromReference,\n  });\n\n  const [filterValue, setFilterValue] = React.useState(\"\");\n\n  const [open, setOpen] = React.useState(false);\n  const selectedChoice = allChoices.find(\n    (choice) => getChoiceValue(choice) === field.value,\n  );\n\n  const getInputText = useCallback(\n    (selectedChoice: any) => {\n      if (typeof inputText === \"function\") {\n        return inputText(selectedChoice);\n      }\n      if (inputText !== undefined) {\n        return inputText;\n      }\n      return getChoiceText(selectedChoice);\n    },\n    [inputText, getChoiceText],\n  );\n\n  const handleOpenChange = useEvent((isOpen: boolean) => {\n    setOpen(isOpen);\n    // Reset the filter when the popover is closed\n    if (!isOpen) {\n      setFilters(filterToQuery(\"\"));\n    }\n  });\n\n  const handleChange = useCallback(\n    (choice: any) => {\n      if (field.value === getChoiceValue(choice) && !isRequired) {\n        field.onChange(\"\");\n        setFilterValue(\"\");\n        if (isFromReference) {\n          setFilters(filterToQuery(\"\"));\n        }\n        setOpen(false);\n        return;\n      }\n      field.onChange(getChoiceValue(choice));\n      setOpen(false);\n    },\n    [\n      field.value,\n      field.onChange,\n      getChoiceValue,\n      isRequired,\n      setFilterValue,\n      isFromReference,\n      setFilters,\n      filterToQuery,\n      setOpen,\n    ],\n  );\n\n  const {\n    getCreateItem,\n    handleChange: handleChangeWithCreateSupport,\n    createElement,\n    getOptionDisabled,\n  } = useSupportCreateSuggestion({\n    create,\n    createLabel,\n    createValue,\n    createHintValue,\n    createItemLabel,\n    onCreate,\n    handleChange,\n    optionText,\n    filter: filterValue,\n  });\n\n  const createItem =\n    (create || onCreate) && (filterValue !== \"\" || createLabel)\n      ? getCreateItem(filterValue)\n      : null;\n  let finalChoices = allChoices;\n  if (createItem) {\n    finalChoices = [...finalChoices, createItem];\n  }\n\n  return (\n    <>\n      <FormField className={props.className} id={id} name={source}>\n        {props.label !== false && (\n          <FormLabel>\n            <FieldTitle\n              label={props.label}\n              source={props.source ?? source}\n              resource={resource}\n              isRequired={isRequired}\n            />\n          </FormLabel>\n        )}\n        <FormControl>\n          <Popover open={open} onOpenChange={handleOpenChange}>\n            <PopoverTrigger asChild>\n              <Button\n                variant=\"outline\"\n                role=\"combobox\"\n                aria-expanded={open}\n                className=\"w-full justify-between h-auto py-1.75 font-normal\"\n              >\n                {selectedChoice ? (\n                  getInputText(selectedChoice)\n                ) : (\n                  <span className=\"text-muted-foreground\">{placeholder}</span>\n                )}\n                <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-full p-0\">\n              {/* We handle the filtering ourselves */}\n              <Command shouldFilter={!isFromReference}>\n                <CommandInput\n                  placeholder=\"Search...\"\n                  value={filterValue}\n                  onValueChange={(filter) => {\n                    setFilterValue(filter);\n                    // We don't want the ChoicesContext to filter the choices if the input\n                    // is not from a reference as it would also filter out the selected values\n                    if (isFromReference) {\n                      setFilters(filterToQuery(filter));\n                    }\n                  }}\n                />\n                <CommandList>\n                  <CommandEmpty>No matching item found.</CommandEmpty>\n                  <CommandGroup>\n                    {finalChoices.map((choice) => {\n                      const isCreateItem =\n                        !!createItem && choice?.id === createItem.id;\n                      const disabled = getOptionDisabled(choice);\n\n                      return (\n                        <CommandItem\n                          key={getChoiceValue(choice)}\n                          value={\n                            isCreateItem\n                              ? // if it's the create option, include the filter value so it is shown in the command input\n                                // characters before and after the filter value are required\n                                // to show the option when the filter value starts or ends with a space\n                                `?${filterValue}?`\n                              : getChoiceValue(choice)\n                          }\n                          onSelect={() => handleChangeWithCreateSupport(choice)}\n                          disabled={disabled}\n                        >\n                          <Check\n                            className={cn(\n                              \"mr-2 h-4 w-4\",\n                              field.value === getChoiceValue(choice)\n                                ? \"opacity-100\"\n                                : \"opacity-0\",\n                            )}\n                          />\n                          {getChoiceText(isCreateItem ? createItem : choice)}\n                        </CommandItem>\n                      );\n                    })}\n                  </CommandGroup>\n                </CommandList>\n              </Command>\n            </PopoverContent>\n          </Popover>\n        </FormControl>\n        <InputHelperText helperText={props.helperText} />\n        <FormError />\n      </FormField>\n      {createElement}\n    </>\n  );\n};\n\nconst DefaultFilterToQuery = (searchText: string) => ({ q: searchText });\n",
      "type": "components:ui"
    }
  ],
  "tailwind": {
    "config": {}
  },
  "betterQuery": {
    "operations": [
      "list"
    ],
    "hook": "useQuery(\"resource\").list()",
    "example": "const { data } = useQuery(\"resource\").list();\n// Use in component"
  }
}