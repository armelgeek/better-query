{
  "name": "date-field",
  "type": "components:ui",
  "category": "data-display",
  "description": "Display dates with formatting and localization",
  "dependencies": {
    "shadcn": [
      "table",
      "card"
    ],
    "npm": []
  },
  "registryDependencies": [],
  "files": [
    {
      "path": "components/admin/date-field.tsx",
      "content": "import { HTMLAttributes } from \"react\";\nimport { useFieldValue, useTranslate } from \"ra-core\";\n\nimport { genericMemo } from \"@/lib/genericMemo\";\nimport { FieldProps } from \"@/lib/field.type.ts\";\n\n/**\n * Display a date value as a locale string.\n *\n * Uses Intl.DateTimeFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs date as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n * @example\n * <DateField source=\"published_at\" />\n * // renders the record { id: 1234, published_at: new Date('2012-11-07') } as\n * <span>07/11/2012</span>\n *\n * <DateField source=\"published_at\" className=\"red\" />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span class=\"red\">07/11/2012</span>\n *\n * <DateField source=\"share\" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span>Wednesday, November 7, 2012</span>\n *\n * <DateField source=\"price\" locales=\"fr-FR\" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span>mercredi 7 novembre 2012</span>\n */\nconst DateFieldImpl = <\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  RecordType extends Record<string, any> = Record<string, any>,\n>(\n  inProps: DateFieldProps<RecordType>,\n) => {\n  const {\n    empty,\n    locales,\n    options,\n    showTime = false,\n    showDate = true,\n    transform = defaultTransform,\n    source,\n    record,\n    defaultValue,\n    ...rest\n  } = inProps;\n  const translate = useTranslate();\n\n  if (!showTime && !showDate) {\n    throw new Error(\n      \"<DateField> cannot have showTime and showDate false at the same time\",\n    );\n  }\n\n  const value = useFieldValue({ source, record, defaultValue });\n  if (value == null || value === \"\") {\n    if (!empty) {\n      return null;\n    }\n\n    return (\n      <span {...rest}>\n        {typeof empty === \"string\" ? translate(empty, { _: empty }) : empty}\n      </span>\n    );\n  }\n\n  const date = transform(value);\n\n  let dateString = \"\";\n  if (date) {\n    if (showTime && showDate) {\n      dateString = toLocaleStringSupportsLocales\n        ? date.toLocaleString(locales, options)\n        : date.toLocaleString();\n    } else if (showDate) {\n      // If input is a date string (e.g. '2022-02-15') without time and time zone,\n      // force timezone to UTC to fix issue with people in negative time zones\n      // who may see a different date when calling toLocaleDateString().\n      const dateOptions =\n        options ??\n        (typeof value === \"string\" && value.length <= 10\n          ? { timeZone: \"UTC\" }\n          : undefined);\n      dateString = toLocaleStringSupportsLocales\n        ? date.toLocaleDateString(locales, dateOptions)\n        : date.toLocaleDateString();\n    } else if (showTime) {\n      dateString = toLocaleStringSupportsLocales\n        ? date.toLocaleTimeString(locales, options)\n        : date.toLocaleTimeString();\n    }\n  }\n\n  return <span {...rest}>{dateString}</span>;\n};\nDateFieldImpl.displayName = \"DateFieldImpl\";\n\nexport const DateField = genericMemo(DateFieldImpl);\n\nexport interface DateFieldProps<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  RecordType extends Record<string, any> = Record<string, any>,\n> extends FieldProps<RecordType>,\n    HTMLAttributes<HTMLSpanElement> {\n  locales?: Intl.LocalesArgument;\n  options?: Intl.DateTimeFormatOptions;\n  showTime?: boolean;\n  showDate?: boolean;\n  transform?: (value: unknown) => Date;\n}\n\nconst defaultTransform = (value: unknown) =>\n  value instanceof Date\n    ? value\n    : typeof value === \"string\" || typeof value === \"number\"\n      ? new Date(value)\n      : undefined;\n\nconst toLocaleStringSupportsLocales = (() => {\n  // from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n  try {\n    new Date().toLocaleString(\"i\");\n  } catch (error) {\n    return error instanceof RangeError;\n  }\n  return false;\n})();\n",
      "type": "components:ui"
    }
  ],
  "tailwind": {
    "config": {}
  }
}