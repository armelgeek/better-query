{
  "name": "file-input",
  "type": "components:ui",
  "category": "forms",
  "description": "File upload input with preview",
  "dependencies": {
    "shadcn": [
      "form",
      "input",
      "label",
      "button"
    ],
    "npm": []
  },
  "registryDependencies": [],
  "files": [
    {
      "path": "components/admin/file-input.tsx",
      "content": "import * as React from \"react\";\nimport {\n  Children,\n  isValidElement,\n  type ComponentType,\n  type ReactElement,\n  type ReactNode,\n  useEffect,\n  HTMLAttributes,\n} from \"react\";\nimport {\n  FieldTitle,\n  InputProps,\n  RecordContextProvider,\n  shallowEqual,\n  useInput,\n  useTranslate,\n} from \"ra-core\";\nimport {\n  useDropzone,\n  type DropzoneOptions,\n  FileRejection,\n  DropEvent,\n  DropzoneInputProps,\n} from \"react-dropzone\";\nimport { XCircle } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { FormError, FormField, FormLabel } from \"@/components/admin/form\";\nimport { InputHelperText } from \"@/components/admin/input-helper-text\";\nimport { Button } from \"@/components/ui/button.tsx\";\n\nexport const FileInput = (props: FileInputProps) => {\n  const {\n    alwaysOn,\n    defaultValue,\n    format,\n    label,\n    helperText,\n    name: nameProp,\n    onBlur: onBlurProp,\n    onChange: onChangeProp,\n    parse,\n    resource,\n    source,\n    validate,\n    readOnly,\n    disabled,\n\n    accept,\n    maxSize,\n    minSize,\n    multiple = false,\n    options = {},\n\n    children,\n    className,\n    inputProps: inputPropsOptions,\n\n    onRemove: onRemoveProp,\n    validateFileRemoval,\n\n    placeholder,\n    labelMultiple = \"ra.input.file.upload_several\",\n    labelSingle = \"ra.input.file.upload_single\",\n    removeIcon,\n    ...rest\n  } = props;\n  const { onDrop: onDropProp } = options;\n  const translate = useTranslate();\n\n  // turn a browser dropped file structure into expected structure\n  const transformFile = (file: unknown) => {\n    if (!(file instanceof File)) {\n      return file;\n    }\n\n    const preview = URL.createObjectURL(file);\n    const transformedFile: TransformedFile = {\n      rawFile: file,\n      src: preview,\n      title: file.name,\n    };\n\n    return transformedFile;\n  };\n\n  const transformFiles = (files: unknown[]) => {\n    if (!files) {\n      return multiple ? [] : null;\n    }\n\n    if (Array.isArray(files)) {\n      return files.map(transformFile);\n    }\n\n    return transformFile(files);\n  };\n\n  const {\n    id,\n    field: { onChange, onBlur, value, name },\n    isRequired,\n  } = useInput({\n    alwaysOn,\n    defaultValue,\n    format: format || transformFiles,\n    label,\n    helperText,\n    name: nameProp,\n    onBlur: onBlurProp,\n    onChange: onChangeProp,\n    parse: parse || transformFiles,\n    resource,\n    source,\n    validate,\n    readOnly,\n    disabled,\n  });\n  const files = value ? (Array.isArray(value) ? value : [value]) : [];\n\n  const onDrop = (\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    newFiles: any[],\n    rejectedFiles: FileRejection[],\n    event: DropEvent,\n  ) => {\n    const updatedFiles = multiple ? [...files, ...newFiles] : [...newFiles];\n\n    if (multiple) {\n      onChange(updatedFiles);\n      onBlur();\n    } else {\n      onChange(updatedFiles[0]);\n      onBlur();\n    }\n\n    if (onDropProp) {\n      onDropProp(newFiles, rejectedFiles, event);\n    }\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const onRemove = (file: any) => async () => {\n    if (validateFileRemoval) {\n      try {\n        await validateFileRemoval(file);\n      } catch {\n        return;\n      }\n    }\n\n    if (multiple) {\n      const filteredFiles = files.filter(\n        (stateFile) => !shallowEqual(stateFile, file),\n      );\n      onChange(filteredFiles);\n      onBlur();\n    } else {\n      onChange(null);\n      onBlur();\n    }\n\n    if (onRemoveProp) {\n      onRemoveProp(file);\n    }\n  };\n\n  const childrenElement =\n    children && isValidElement(Children.only(children))\n      ? (Children.only(children) as ReactElement)\n      : undefined;\n\n  const { getRootProps, getInputProps } = useDropzone({\n    accept,\n    maxSize,\n    minSize,\n    multiple,\n    disabled: disabled || readOnly,\n    ...options,\n    onDrop,\n  });\n\n  return (\n    <FormField\n      id={id}\n      name={name}\n      className={cn(\"w-full\", className)}\n      {...rest}\n    >\n      <FormLabel\n        htmlFor={id}\n        className={disabled || readOnly ? \"cursor-default\" : \"cursor-pointer\"}\n      >\n        <FieldTitle\n          label={label}\n          source={source}\n          resource={resource}\n          isRequired={isRequired}\n        />\n      </FormLabel>\n\n      <div\n        {...getRootProps({\n          className: cn(\n            \"border-2 border-dashed border-muted rounded-lg p-6 text-center transition-colors\",\n            \"hover:border-sidebar-ring focus:outline-none\",\n            disabled || readOnly\n              ? \"bg-muted cursor-not-allowed\"\n              : \"bg-muted text-muted-foreground cursor-pointer\",\n          ),\n        })}\n      >\n        <input\n          id={id}\n          name={name}\n          {...getInputProps({\n            ...inputPropsOptions,\n          })}\n        />\n\n        {placeholder ? (\n          placeholder\n        ) : multiple ? (\n          <p className=\"text-sm\">{translate(labelMultiple)}</p>\n        ) : (\n          <p className=\"text-sm\">{translate(labelSingle)}</p>\n        )}\n      </div>\n\n      <InputHelperText helperText={helperText} />\n      <FormError />\n\n      {children && (\n        <div className=\"previews flex flex-col gap-1\">\n          {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            files.map((file: any, index: number) => (\n              <FileInputPreview\n                key={index}\n                file={file}\n                onRemove={onRemove(file)}\n                removeIcon={removeIcon}\n              >\n                <RecordContextProvider value={file}>\n                  {childrenElement}\n                </RecordContextProvider>\n              </FileInputPreview>\n            ))\n          }\n        </div>\n      )}\n    </FormField>\n  );\n};\n\nexport type FileInputProps = Omit<InputProps, \"type\"> & {\n  accept?: DropzoneOptions[\"accept\"];\n  className?: string;\n  children?: ReactNode;\n  labelMultiple?: string;\n  labelSingle?: string;\n  maxSize?: DropzoneOptions[\"maxSize\"];\n  minSize?: DropzoneOptions[\"minSize\"];\n  multiple?: DropzoneOptions[\"multiple\"];\n  options?: DropzoneOptions;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  onRemove?: (file: any) => void;\n  placeholder?: ReactNode;\n  removeIcon?: ComponentType<{ className?: string }>;\n  inputProps?: DropzoneInputProps & React.ComponentProps<\"input\">;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  validateFileRemoval?(file: any): boolean | Promise<boolean>;\n};\n\nexport interface TransformedFile {\n  rawFile: File;\n  src: string;\n  title: string;\n}\n\nexport const FileInputPreview = (props: FileInputPreviewProps) => {\n  const {\n    className,\n    children,\n\n    file,\n    onRemove,\n    removeIcon: RemoveIcon = XCircle,\n\n    ...rest\n  } = props;\n\n  const translate = useTranslate();\n\n  useEffect(() => {\n    return () => {\n      const preview = file.rawFile ? file.rawFile.preview : file.preview;\n\n      if (preview) {\n        window.URL.revokeObjectURL(preview);\n      }\n    };\n  }, [file]);\n\n  return (\n    <div className={cn(\"flex flex-row gap-1\", className)} {...rest}>\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        className=\"h-6 w-6 rounded-full shadow-sm cursor-pointer\"\n        onClick={onRemove}\n        aria-label={translate(\"ra.action.delete\")}\n        title={translate(\"ra.action.delete\")}\n      >\n        <RemoveIcon className=\"h-4 w-4\" />\n      </Button>\n      {children}\n    </div>\n  );\n};\n\nexport interface FileInputPreviewProps extends HTMLAttributes<HTMLDivElement> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  file: any;\n  onRemove: () => void;\n  removeIcon?: React.ComponentType<{ className?: string }>;\n}\n",
      "type": "components:ui"
    }
  ],
  "tailwind": {
    "config": {}
  }
}