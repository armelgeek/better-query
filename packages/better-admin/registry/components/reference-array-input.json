{
	"name": "reference-array-input",
	"type": "components:ui",
	"category": "forms",
	"description": "Input for selecting multiple related records",
	"dependencies": {
		"shadcn": ["form", "input", "label", "button"],
		"npm": []
	},
	"registryDependencies": [],
	"files": [
		{
			"path": "components/admin/reference-array-input.tsx",
			"content": "import * as React from \"react\";\nimport { ReactElement } from \"react\";\nimport {\n  InputProps,\n  useReferenceArrayInputController,\n  ResourceContextProvider,\n  ChoicesContextProvider,\n  UseReferenceArrayInputParams,\n} from \"ra-core\";\nimport { AutocompleteArrayInput } from \"@/components/admin/autocomplete-array-input\";\n\n/**\n * An Input component for fields containing a list of references to another resource.\n * Useful for 'hasMany' relationship.\n *\n * @example\n * The post object has many tags, so the post resource looks like:\n * {\n *    id: 1234,\n *    tag_ids: [ \"1\", \"23\", \"4\" ]\n * }\n *\n * ReferenceArrayInput component fetches the current resources (using\n * `dataProvider.getMany()`) as well as possible resources (using\n * `dataProvider.getList()`) in the reference endpoint. It then\n * delegates rendering to its child component, to which it makes the possible\n * choices available through the ChoicesContext.\n *\n * @example\n * export const PostEdit = () => (\n *     <Edit>\n *         <SimpleForm>\n *             <ReferenceArrayInput source=\"tag_ids\" reference=\"tags\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      perPage={100}\n * />\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      sort={{ field: 'name', order: 'ASC' }}\n * />\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      filter={{ is_public: true }}\n * />\n *\n * The enclosed component may filter results. ReferenceArrayInput create a ChoicesContext which provides\n * a `setFilters` function. You can call this function to filter the results.\n */\nexport const ReferenceArrayInput = (props: ReferenceArrayInputProps) => {\n  const {\n    children = defaultChildren,\n    reference,\n    sort,\n    filter = defaultFilter,\n  } = props;\n  if (React.Children.count(children) !== 1) {\n    throw new Error(\n      \"<ReferenceArrayInput> only accepts a single child (like <AutocompleteArrayInput>)\"\n    );\n  }\n\n  const controllerProps = useReferenceArrayInputController({\n    ...props,\n    sort,\n    filter,\n  });\n\n  return (\n    <ResourceContextProvider value={reference}>\n      <ChoicesContextProvider value={controllerProps}>\n        {children}\n      </ChoicesContextProvider>\n    </ResourceContextProvider>\n  );\n};\n\nconst defaultChildren = <AutocompleteArrayInput />;\nconst defaultFilter = {};\n\nexport interface ReferenceArrayInputProps\n  extends InputProps,\n    UseReferenceArrayInputParams {\n  children?: ReactElement;\n}\n",
			"type": "components:ui"
		}
	],
	"tailwind": {
		"config": {}
	},
	"betterQuery": {
		"operations": ["list"],
		"hook": "useQuery(\"reference\").list()",
		"example": "const { data } = useQuery(\"reference\").list();\n// Use in component"
	}
}
