{
  "name": "autocomplete-array-input",
  "type": "components:ui",
  "category": "forms",
  "description": "Autocomplete for multiple selections",
  "dependencies": {
    "shadcn": [
      "form",
      "input",
      "label",
      "button"
    ],
    "npm": []
  },
  "registryDependencies": [],
  "files": [
    {
      "path": "components/admin/autocomplete-array-input.tsx",
      "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport * as React from \"react\";\nimport { X } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Command,\n  CommandGroup,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  FormControl,\n  FormError,\n  FormField,\n  FormLabel,\n} from \"@/components/admin/form\";\nimport { Command as CommandPrimitive } from \"cmdk\";\nimport {\n  ChoicesProps,\n  InputProps,\n  useChoices,\n  useChoicesContext,\n  useGetRecordRepresentation,\n  useInput,\n  useTranslate,\n  FieldTitle,\n  useEvent,\n} from \"ra-core\";\nimport { InputHelperText } from \"./input-helper-text\";\nimport { useCallback } from \"react\";\n\nexport const AutocompleteArrayInput = (\n  props: Omit<InputProps, \"source\"> &\n    Partial<Pick<InputProps, \"source\">> &\n    ChoicesProps & {\n      className?: string;\n      disableValue?: string;\n      filterToQuery?: (searchText: string) => any;\n      translateChoice?: boolean;\n      placeholder?: string;\n      inputText?:\n        | React.ReactNode\n        | ((option: any | undefined) => React.ReactNode);\n    },\n) => {\n  const { filterToQuery = DefaultFilterToQuery, inputText } = props;\n  const {\n    allChoices = [],\n    source,\n    resource,\n    isFromReference,\n    setFilters,\n  } = useChoicesContext(props);\n  const { id, field, isRequired } = useInput({ ...props, source });\n  const translate = useTranslate();\n  const { placeholder = translate(\"ra.action.search\", { _: \"Search...\" }) } =\n    props;\n\n  const getRecordRepresentation = useGetRecordRepresentation(resource);\n  const { getChoiceText, getChoiceValue } = useChoices({\n    optionText:\n      props.optionText ?? (isFromReference ? getRecordRepresentation : \"name\"),\n    optionValue: props.optionValue ?? \"id\",\n    disableValue: props.disableValue,\n    translateChoice: props.translateChoice ?? !isFromReference,\n  });\n\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const [open, setOpen] = React.useState(false);\n\n  const handleUnselect = useEvent((choice: any) => {\n    field.onChange(\n      field.value.filter((v: any) => v !== getChoiceValue(choice)),\n    );\n  });\n\n  const handleKeyDown = useEvent((e: React.KeyboardEvent<HTMLDivElement>) => {\n    const input = inputRef.current;\n    if (input) {\n      if (e.key === \"Delete\" || e.key === \"Backspace\") {\n        if (input.value === \"\") {\n          field.onChange(field.value.slice(0, -1));\n        }\n      }\n      // This is not a default behavior of the <input /> field\n      if (e.key === \"Escape\") {\n        input.blur();\n      }\n    }\n  });\n\n  const availableChoices = allChoices.filter(\n    (choice) => !field.value.includes(getChoiceValue(choice)),\n  );\n  const selectedChoices = allChoices.filter((choice) =>\n    field.value.includes(getChoiceValue(choice)),\n  );\n  const [filterValue, setFilterValue] = React.useState(\"\");\n\n  const getInputText = useCallback(\n    (selectedChoice: any) => {\n      if (typeof inputText === \"function\") {\n        return inputText(selectedChoice);\n      }\n      if (inputText !== undefined) {\n        return inputText;\n      }\n      return getChoiceText(selectedChoice);\n    },\n    [inputText, getChoiceText],\n  );\n\n  return (\n    <FormField className={props.className} id={id} name={field.name}>\n      {props.label !== false && (\n        <FormLabel>\n          <FieldTitle\n            label={props.label}\n            source={props.source ?? source}\n            resource={resource}\n            isRequired={isRequired}\n          />\n        </FormLabel>\n      )}\n      <FormControl>\n        <Command\n          onKeyDown={handleKeyDown}\n          shouldFilter={!isFromReference}\n          className=\"overflow-visible bg-transparent\"\n        >\n          <div className=\"group rounded-md bg-transparent dark:bg-input/30 border border-input px-3 py-1.75 text-sm transition-all ring-offset-background focus-within:border-ring focus-within:ring-ring/50 focus-within:ring-[3px]\">\n            <div className=\"flex flex-wrap gap-1\">\n              {selectedChoices.map((choice) => (\n                <Badge key={getChoiceValue(choice)} variant=\"outline\">\n                  {getInputText(choice)}\n                  <button\n                    className=\"ml-1 rounded-full outline-none ring-offset-background focus:ring-2 focus:ring-ring focus:ring-offset-2\"\n                    onKeyDown={(e) => {\n                      if (e.key === \"Enter\") {\n                        handleUnselect(choice);\n                      }\n                    }}\n                    onMouseDown={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                    }}\n                    onClick={(e) => {\n                      e.preventDefault();\n                      handleUnselect(choice);\n                    }}\n                  >\n                    <span className=\"sr-only\">\n                      {translate(\"ra.action.remove\", {\n                        _: \"Remove\",\n                      })}\n                    </span>\n                    <X className=\"h-3 w-3\" />\n                  </button>\n                </Badge>\n              ))}\n              {/* Avoid having the \"Search\" Icon by not using CommandInput */}\n              <CommandPrimitive.Input\n                ref={inputRef}\n                value={filterValue}\n                onValueChange={(filter) => {\n                  setFilterValue(filter);\n                  // We don't want the ChoicesContext to filter the choices if the input\n                  // is not from a reference as it would also filter out the selected values\n                  if (isFromReference) {\n                    setFilters(filterToQuery(filter), undefined, true);\n                  }\n                }}\n                onBlur={() => setOpen(false)}\n                onFocus={() => setOpen(true)}\n                placeholder={placeholder}\n                className=\"ml-2 flex-1 bg-transparent outline-none placeholder:text-muted-foreground\"\n              />\n            </div>\n          </div>\n          <div className=\"relative\">\n            <CommandList>\n              {open && availableChoices.length > 0 ? (\n                <div className=\"absolute top-2 z-10 w-full rounded-md border bg-popover text-popover-foreground shadow-md outline-none animate-in\">\n                  <CommandGroup className=\"h-full overflow-auto\">\n                    {availableChoices.map((choice) => {\n                      return (\n                        <CommandItem\n                          key={getChoiceValue(choice)}\n                          onMouseDown={(e) => {\n                            e.preventDefault();\n                            e.stopPropagation();\n                          }}\n                          onSelect={() => {\n                            setFilterValue(\"\");\n                            if (isFromReference) {\n                              setFilters(filterToQuery(\"\"));\n                            }\n                            field.onChange([\n                              ...field.value,\n                              getChoiceValue(choice),\n                            ]);\n                          }}\n                          className=\"cursor-pointer\"\n                        >\n                          {getChoiceText(choice)}\n                        </CommandItem>\n                      );\n                    })}\n                  </CommandGroup>\n                </div>\n              ) : null}\n            </CommandList>\n          </div>\n        </Command>\n      </FormControl>\n      <InputHelperText helperText={props.helperText} />\n      <FormError />\n    </FormField>\n  );\n};\n\nconst DefaultFilterToQuery = (searchText: string) => ({ q: searchText });\n",
      "type": "components:ui"
    }
  ],
  "tailwind": {
    "config": {}
  },
  "betterQuery": {
    "operations": [
      "list"
    ],
    "hook": "useQuery(\"resource\").list()",
    "example": "const { data } = useQuery(\"resource\").list();\n// Use in component"
  }
}