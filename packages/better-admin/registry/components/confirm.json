{
	"name": "confirm",
	"type": "components:ui",
	"category": "feedback",
	"description": "Confirmation dialog",
	"dependencies": {
		"shadcn": ["alert", "toast"],
		"npm": []
	},
	"registryDependencies": [],
	"files": [
		{
			"path": "components/admin/confirm.tsx",
			"content": "import { AlertCircle, CheckCircle } from \"lucide-react\";\nimport { useTranslate } from \"ra-core\";\nimport * as React from \"react\";\nimport { type ComponentType, type MouseEventHandler, useCallback } from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\n\nexport const Confirm = (props: ConfirmProps) => {\n  const {\n    className,\n    isOpen = false,\n    loading,\n    title,\n    content,\n    cancel = \"ra.action.cancel\",\n    confirm = \"ra.action.confirm\",\n    confirmColor = \"primary\",\n    ConfirmIcon = CheckCircle,\n    CancelIcon = AlertCircle,\n    onClose,\n    onConfirm,\n    translateOptions = {},\n    titleTranslateOptions = translateOptions,\n    contentTranslateOptions = translateOptions,\n    ...rest\n  } = props;\n\n  const translate = useTranslate();\n\n  const handleConfirm = useCallback(\n    (e: React.MouseEvent<HTMLButtonElement>) => {\n      e.stopPropagation();\n      onConfirm(e);\n    },\n    [onConfirm],\n  );\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n  }, []);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={() => onClose()}>\n      <DialogContent className={className} onClick={handleClick} {...rest}>\n        <DialogHeader>\n          <DialogTitle>\n            {typeof title === \"string\"\n              ? translate(title, { _: title, ...titleTranslateOptions })\n              : title}\n          </DialogTitle>\n          {typeof content === \"string\" ? (\n            <DialogDescription>\n              {translate(content, {\n                _: content,\n                ...contentTranslateOptions,\n              })}\n            </DialogDescription>\n          ) : (\n            content\n          )}\n        </DialogHeader>\n        <DialogFooter>\n          <Button\n            variant=\"ghost\"\n            disabled={loading}\n            onClick={onClose}\n            className=\"gap-1\"\n          >\n            <CancelIcon className=\"h-5 w-5\" />\n            {translate(cancel, { _: cancel })}\n          </Button>\n          <Button\n            disabled={loading}\n            onClick={handleConfirm}\n            className=\"gap-1\"\n            variant={confirmColor === \"warning\" ? \"destructive\" : \"default\"}\n          >\n            <ConfirmIcon className=\"h-5 w-5\" />\n            {translate(confirm, { _: confirm })}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport interface ConfirmProps {\n  cancel?: string;\n  className?: string;\n  confirm?: string;\n  confirmColor?: \"primary\" | \"warning\";\n  ConfirmIcon?: ComponentType;\n  CancelIcon?: ComponentType;\n  content: React.ReactNode;\n  isOpen?: boolean;\n  loading?: boolean;\n  onClose: () => void;\n  onConfirm: MouseEventHandler;\n  title: React.ReactNode;\n  /**\n   * @deprecated use `titleTranslateOptions` and `contentTranslateOptions` instead\n   */\n  translateOptions?: object;\n  titleTranslateOptions?: object;\n  contentTranslateOptions?: object;\n}\n",
			"type": "components:ui"
		}
	],
	"tailwind": {
		"config": {}
	}
}
