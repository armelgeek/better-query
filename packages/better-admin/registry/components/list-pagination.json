{
  "name": "list-pagination",
  "type": "components:ui",
  "category": "layout",
  "description": "Pagination controls for lists",
  "dependencies": {
    "shadcn": [
      "card",
      "separator"
    ],
    "npm": []
  },
  "registryDependencies": [],
  "files": [
    {
      "path": "components/admin/list-pagination.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n} from \"@/components/ui/pagination\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { ChevronLeftIcon, ChevronRightIcon } from \"lucide-react\";\nimport { useListPaginationContext, Translate, useTranslate } from \"ra-core\";\n\nexport const ListPagination = ({\n  rowsPerPageOptions = [5, 10, 25, 50],\n  className,\n}: {\n  rowsPerPageOptions?: number[];\n  className?: string;\n}) => {\n  const translate = useTranslate();\n  const {\n    hasPreviousPage,\n    hasNextPage,\n    page,\n    perPage,\n    setPerPage,\n    total,\n    setPage,\n  } = useListPaginationContext();\n\n  const pageStart = (page - 1) * perPage + 1;\n  const pageEnd = hasNextPage ? page * perPage : total;\n\n  const boundaryCount = 1;\n  const siblingCount = 1;\n  const count = total ? Math.ceil(total / perPage) : 1;\n\n  const range = (start: number, end: number) => {\n    const length = end - start + 1;\n    return Array.from({ length }, (_, i) => start + i);\n  };\n\n  const startPages = range(1, Math.min(boundaryCount, count));\n  const endPages = range(\n    Math.max(count - boundaryCount + 1, boundaryCount + 1),\n    count\n  );\n\n  const siblingsStart = Math.max(\n    Math.min(\n      // Natural start\n      page - siblingCount,\n      // Lower boundary when page is high\n      count - boundaryCount - siblingCount * 2 - 1\n    ),\n    // Greater than startPages\n    boundaryCount + 2\n  );\n\n  const siblingsEnd = Math.min(\n    Math.max(\n      // Natural end\n      page + siblingCount,\n      // Upper boundary when page is low\n      boundaryCount + siblingCount * 2 + 2\n    ),\n    // Less than endPages\n    count - boundaryCount - 1\n  );\n\n  const siblingPages = range(siblingsStart, siblingsEnd);\n\n  const pageChangeHandler = (newPage: number) => {\n    return (event: React.MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      setPage(newPage);\n    };\n  };\n\n  return (\n    <div\n      className={`flex items-center justify-end space-x-2 gap-4 ${className}`}\n    >\n      <div className=\"hidden md:flex items-center space-x-2\">\n        <p className=\"text-sm font-medium\">\n          <Translate i18nKey=\"ra.navigation.page_rows_per_page\">\n            Rows per page\n          </Translate>\n        </p>\n        <Select\n          value={perPage.toString()}\n          onValueChange={(value) => {\n            setPerPage(Number(value));\n          }}\n        >\n          <SelectTrigger className=\"h-8 w-[70px]\">\n            <SelectValue placeholder={perPage} />\n          </SelectTrigger>\n          <SelectContent side=\"top\">\n            {rowsPerPageOptions.map((pageSize) => (\n              <SelectItem key={pageSize} value={`${pageSize}`}>\n                {pageSize}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n      <div className=\"text-sm text-muted-foreground\">\n        <Translate\n          i18nKey=\"ra.navigation.page_range_info\"\n          options={{\n            offsetBegin: pageStart,\n            offsetEnd: pageEnd,\n            total: total === -1 ? pageEnd : total,\n          }}\n        >\n          {total != null\n            ? `${pageStart}-${pageEnd} of ${total === -1 ? pageEnd : total}`\n            : null}\n        </Translate>\n      </div>\n      <Pagination className=\"-w-full -mx-auto\">\n        <PaginationContent>\n          <PaginationItem>\n            <PaginationLink\n              href=\"#\"\n              onClick={pageChangeHandler(page - 1)}\n              className={cn(\n                \"gap-1 px-2.5 sm:pr-2.5\",\n                !hasPreviousPage ? \"opacity-50 cursor-not-allowed\" : \"\"\n              )}\n              aria-label={translate(\"ra.navigation.previous\", {\n                _: \"Previous\",\n              })}\n            >\n              <ChevronLeftIcon />\n            </PaginationLink>\n          </PaginationItem>\n          {startPages.map((pageNumber) => (\n            <PaginationItem key={pageNumber}>\n              <PaginationLink\n                href=\"#\"\n                onClick={pageChangeHandler(pageNumber)}\n                isActive={pageNumber === page}\n              >\n                {pageNumber}\n              </PaginationLink>\n            </PaginationItem>\n          ))}\n          {siblingsStart > boundaryCount + 2 ? (\n            <PaginationItem>\n              <PaginationEllipsis />\n            </PaginationItem>\n          ) : boundaryCount + 1 < count - boundaryCount ? (\n            <PaginationItem>\n              <PaginationLink\n                href=\"#\"\n                onClick={pageChangeHandler(boundaryCount + 1)}\n                isActive={boundaryCount + 1 === page}\n              >\n                {boundaryCount + 1}\n              </PaginationLink>\n            </PaginationItem>\n          ) : null}\n          {siblingPages.map((pageNumber) => (\n            <PaginationItem key={pageNumber}>\n              <PaginationLink\n                href=\"#\"\n                onClick={pageChangeHandler(pageNumber)}\n                isActive={pageNumber === page}\n              >\n                {pageNumber}\n              </PaginationLink>\n            </PaginationItem>\n          ))}\n          {siblingsEnd < count - boundaryCount - 1 ? (\n            <PaginationItem>\n              <PaginationEllipsis />\n            </PaginationItem>\n          ) : count - boundaryCount > boundaryCount ? (\n            <PaginationItem>\n              <PaginationLink\n                href=\"#\"\n                onClick={pageChangeHandler(count - boundaryCount)}\n                isActive={count - boundaryCount === page}\n              >\n                {count - boundaryCount}\n              </PaginationLink>\n            </PaginationItem>\n          ) : null}\n          {endPages.map((pageNumber) => (\n            <PaginationItem key={pageNumber}>\n              <PaginationLink\n                href=\"#\"\n                onClick={pageChangeHandler(pageNumber)}\n                isActive={pageNumber === page}\n              >\n                {pageNumber}\n              </PaginationLink>\n            </PaginationItem>\n          ))}\n          <PaginationItem>\n            <PaginationLink\n              href=\"#\"\n              onClick={pageChangeHandler(page + 1)}\n              size=\"default\"\n              className={cn(\n                \"gap-1 px-2.5 sm:pr-2.5\",\n                !hasNextPage ? \"opacity-50 cursor-not-allowed\" : \"\"\n              )}\n              aria-label={translate(\"ra.navigation.next\", { _: \"Next\" })}\n            >\n              <ChevronRightIcon />\n            </PaginationLink>\n          </PaginationItem>\n        </PaginationContent>\n      </Pagination>\n    </div>\n  );\n};\n",
      "type": "components:ui"
    }
  ],
  "tailwind": {
    "config": {}
  }
}