{
  "name": "field-toggle",
  "type": "components:ui",
  "category": "forms",
  "description": "Toggle field visibility",
  "dependencies": {
    "shadcn": [
      "form",
      "input",
      "label",
      "button"
    ],
    "npm": []
  },
  "registryDependencies": [],
  "files": [
    {
      "path": "components/admin/field-toggle.tsx",
      "content": "import * as React from \"react\";\nimport { FieldTitle, useResourceContext } from \"ra-core\";\nimport { GripVertical } from \"lucide-react\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { cn } from \"@/lib/utils\";\n\n/**\n * UI to enable/disable a field\n */\nexport const FieldToggle = (props: FieldToggleProps) => {\n  const { selected, label, onToggle, onMove, source, index } = props;\n  const resource = useResourceContext();\n  const dropIndex = React.useRef<number | null>(null);\n  const x = React.useRef<number | null>(null);\n  const y = React.useRef<number | null>(null);\n\n  const handleDocumentDragOver = React.useCallback((event: DragEvent) => {\n    x.current = event.clientX;\n    y.current = event.clientY;\n  }, []);\n\n  const handleDragStart = () => {\n    document.addEventListener(\n      \"dragover\",\n      handleDocumentDragOver as EventListener\n    );\n  };\n\n  const handleDrag = (event: React.DragEvent) => {\n    // imperative DOM manipulations using the native Drag API\n    const selectedItem = event.target as HTMLElement;\n    selectedItem.dataset.dragActive = \"true\";\n    const list = selectedItem.closest(\"ul\");\n    if (x.current == null || y.current == null) {\n      return;\n    }\n    const elementAtDragCoordinates = document.elementFromPoint(\n      x.current,\n      y.current\n    );\n    let dropItem =\n      elementAtDragCoordinates === null\n        ? selectedItem\n        : elementAtDragCoordinates.closest(\"li\");\n\n    if (!dropItem) {\n      return;\n    }\n    if (dropItem.classList.contains(\"dragIcon\")) {\n      const parent = dropItem.parentNode;\n      if (parent instanceof HTMLElement) {\n        dropItem = parent;\n      }\n    }\n    if (dropItem === selectedItem) {\n      return;\n    }\n    const dropItemParent = dropItem.parentNode;\n    if (\n      list &&\n      dropItemParent instanceof HTMLElement &&\n      list === dropItemParent.closest(\"ul\")\n    ) {\n      const dataIndex = dropItem.dataset.index;\n      if (dataIndex) {\n        dropIndex.current = parseInt(dataIndex, 10);\n      }\n      if (dropItem === selectedItem.nextSibling) {\n        dropItem = dropItem.nextSibling as HTMLElement;\n      }\n      list.insertBefore(selectedItem, dropItem);\n    }\n  };\n\n  const handleDragEnd = (event: React.DragEvent) => {\n    const selectedItem = event.target as HTMLElement;\n    const list = selectedItem.closest(\"ul\");\n\n    const elementFromPoint =\n      x.current != null && y.current != null\n        ? document.elementFromPoint(x.current, y.current)\n        : null;\n\n    let dropItem =\n      x.current == null || y.current == null || elementFromPoint === null\n        ? selectedItem\n        : elementFromPoint.closest(\"li\");\n\n    if (y.current !== null && list && !dropItem) {\n      const closestUL = selectedItem.closest(\"ul\");\n      if (closestUL && y.current > closestUL.getBoundingClientRect().bottom) {\n        dropItem = list.lastChild as HTMLElement;\n      } else {\n        dropItem = list.firstChild as HTMLElement;\n      }\n    }\n\n    if (dropItem && list && dropItem.closest(\"ul\") === list) {\n      if (onMove) onMove(selectedItem.dataset.index!, dropIndex.current!);\n    } else {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    selectedItem.dataset.dragActive = \"false\";\n    document.removeEventListener(\n      \"dragover\",\n      handleDocumentDragOver as EventListener\n    );\n  };\n\n  const handleDragOver = (event: React.DragEvent) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = \"move\";\n  };\n\n  return (\n    <li\n      key={source}\n      role=\"option\"\n      draggable={onMove ? \"true\" : undefined}\n      onDrag={onMove ? handleDrag : undefined}\n      onDragStart={onMove ? handleDragStart : undefined}\n      onDragEnd={onMove ? handleDragEnd : undefined}\n      onDragOver={onMove ? handleDragOver : undefined}\n      data-index={index}\n      className={cn(\n        \"flex justify-between items-center py-1\",\n        \"data-[drag-active=true]:bg-transparent data-[drag-active=true]:text-transparent data-[drag-active=true]:outline data-[drag-active=true]:outline-1 data-[drag-active=true]:outline-border\"\n      )}\n    >\n      <label\n        htmlFor={`switch_${index}`}\n        className=\"flex items-center gap-2 cursor-pointer\"\n      >\n        <Switch\n          id={`switch_${index}`}\n          checked={selected}\n          onCheckedChange={onToggle}\n          name={`${index}`}\n        />\n        <span className=\"text-sm\">\n          <FieldTitle label={label} source={source} resource={resource} />\n        </span>\n      </label>\n      {onMove && (\n        <GripVertical className=\"cursor-move dragIcon w-4 h-4 text-muted-foreground\" />\n      )}\n    </li>\n  );\n};\n\nexport interface FieldToggleProps {\n  selected: boolean;\n  label: React.ReactNode;\n  onToggle?: (event: boolean) => void;\n  onMove?: (\n    dragIndex: string | number,\n    dropIndex: string | number | null\n  ) => void;\n  source: string;\n  index: number | string;\n}\n",
      "type": "components:ui"
    }
  ],
  "tailwind": {
    "config": {}
  }
}