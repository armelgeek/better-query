{
	"name": "form",
	"type": "components:ui",
	"category": "forms",
	"description": "Base form component with validation and submission",
	"dependencies": {
		"shadcn": ["form", "input", "label", "button"],
		"npm": []
	},
	"registryDependencies": [],
	"files": [
		{
			"path": "components/admin/form.tsx",
			"content": "import * as React from \"react\";\nimport {\n  createContext,\n  type MouseEventHandler,\n  useCallback,\n  useContext,\n  useMemo,\n} from \"react\";\nimport {\n  type CreateParams,\n  type RaRecord,\n  setSubmissionErrors,\n  type TransformData,\n  type UpdateParams,\n  useRecordFromLocation,\n  useSaveContext,\n  useTranslate,\n  ValidationError,\n  warning,\n} from \"ra-core\";\nimport { Loader2, Save } from \"lucide-react\";\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { FormProvider, useFormContext, useFormState } from \"react-hook-form\";\nimport type { UseMutationOptions } from \"@tanstack/react-query\";\nimport { cn } from \"@/lib/utils\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button.tsx\";\n\nconst Form = FormProvider;\n\ntype FormItemContextValue = {\n  id: string;\n  name: string;\n};\n\nconst FormItemContext = createContext<FormItemContextValue>(\n  {} as FormItemContextValue,\n);\n\nconst useFormField = () => {\n  const { getFieldState, formState } = useFormContext();\n  const { id, name } = useContext(FormItemContext);\n\n  const fieldState = getFieldState(name, formState);\n\n  return useMemo(\n    () => ({\n      formItemId: id,\n      formDescriptionId: `${id}-description`,\n      formMessageId: `${id}-message`,\n      ...fieldState,\n    }),\n    [id, fieldState],\n  );\n};\n\nfunction FormField({ className, id, name, ...props }: FormItemProps) {\n  const contextValue: FormItemContextValue = useMemo(\n    () => ({\n      id,\n      name,\n    }),\n    [id, name],\n  );\n\n  return (\n    <FormItemContext.Provider value={contextValue}>\n      <div\n        data-slot=\"form-item\"\n        className={cn(\"grid gap-2\", className)}\n        role=\"group\"\n        {...props}\n      />\n    </FormItemContext.Provider>\n  );\n}\n\ntype FormItemProps = Omit<React.ComponentProps<\"div\">, \"id\"> & {\n  id: string;\n  name: string;\n};\n\nfunction FormLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  const { error, formItemId } = useFormField();\n\n  return (\n    <Label\n      data-slot=\"form-label\"\n      data-error={!!error}\n      className={cn(\"data-[error=true]:text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  );\n}\n\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n  const { error, formItemId, formDescriptionId, formMessageId } =\n    useFormField();\n\n  return (\n    <Slot\n      data-slot=\"form-control\"\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  );\n}\n\nfunction FormDescription({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { formDescriptionId } = useFormField();\n\n  return (\n    <div\n      data-slot=\"form-description\"\n      id={formDescriptionId}\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  );\n}\n\nconst FormError = ({ className, ...props }: React.ComponentProps<\"p\">) => {\n  const { invalid, error, formMessageId } = useFormField();\n\n  const err = error?.root?.message ?? error?.message;\n  if (!invalid || !err) {\n    return null;\n  }\n\n  return (\n    <p\n      data-slot=\"form-message\"\n      id={formMessageId}\n      className={cn(\"text-destructive text-sm\", className)}\n      {...props}\n    >\n      <ValidationError error={err} />\n    </p>\n  );\n};\n\nconst SaveButton = <RecordType extends RaRecord = RaRecord>(\n  props: SaveButtonProps<RecordType>,\n) => {\n  const {\n    className,\n    icon = defaultIcon,\n    label = \"ra.action.save\",\n    onClick,\n    mutationOptions,\n    disabled: disabledProp,\n    type = \"submit\",\n    transform,\n    variant = \"default\",\n    alwaysEnable = false,\n    ...rest\n  } = props;\n  const translate = useTranslate();\n  const form = useFormContext();\n  const saveContext = useSaveContext();\n  const { dirtyFields, isValidating, isSubmitting } = useFormState();\n  // useFormState().isDirty might differ from useFormState().dirtyFields (https://github.com/react-hook-form/react-hook-form/issues/4740)\n  const isDirty = Object.keys(dirtyFields).length > 0;\n  // Use form isDirty, isValidating and form context saving to enable or disable the save button\n  // if alwaysEnable is undefined and the form wasn't prefilled\n  const recordFromLocation = useRecordFromLocation();\n  const disabled = valueOrDefault(\n    alwaysEnable === false || alwaysEnable === undefined\n      ? undefined\n      : !alwaysEnable,\n    disabledProp ||\n      (!isDirty && recordFromLocation == null) ||\n      isValidating ||\n      isSubmitting,\n  );\n\n  warning(\n    type === \"submit\" &&\n      ((mutationOptions &&\n        (mutationOptions.onSuccess || mutationOptions.onError)) ||\n        transform),\n    'Cannot use <SaveButton mutationOptions> props on a button of type \"submit\". To override the default mutation options on a particular save button, set the <SaveButton type=\"button\"> prop, or set mutationOptions in the main view component (<Create> or <Edit>).',\n  );\n\n  const handleSubmit = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async (values: any) => {\n      let errors;\n      if (saveContext?.save) {\n        errors = await saveContext.save(values, {\n          ...mutationOptions,\n          transform,\n        });\n      }\n      if (errors != null) {\n        setSubmissionErrors(errors, form.setError);\n      }\n    },\n    [form.setError, saveContext, mutationOptions, transform],\n  );\n\n  const handleClick: MouseEventHandler<HTMLButtonElement> = useCallback(\n    async (event) => {\n      if (onClick) {\n        onClick(event);\n      }\n      if (event.defaultPrevented) {\n        return;\n      }\n      if (type === \"button\") {\n        // this button doesn't submit the form, so it doesn't trigger useIsFormInvalid in <FormContent>\n        // therefore we need to check for errors manually\n        event.stopPropagation();\n        await form.handleSubmit(handleSubmit)(event);\n      }\n    },\n    [onClick, type, form, handleSubmit],\n  );\n\n  const displayedLabel = label && translate(label, { _: label });\n\n  return (\n    <Button\n      variant={variant}\n      type={type}\n      disabled={disabled}\n      onClick={handleClick}\n      className={cn(\n        disabled ? \"opacity-50 cursor-not-allowed\" : \"cursor-pointer\",\n        className,\n      )}\n      {...rest}\n    >\n      {isSubmitting ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : icon}\n      {displayedLabel}\n    </Button>\n  );\n};\n\nconst defaultIcon = <Save className=\"h-4 w-4\" />;\n\ninterface Props<\n  RecordType extends RaRecord = RaRecord,\n  MutationOptionsError = unknown,\n> {\n  className?: string;\n  disabled?: boolean;\n  icon?: React.ReactNode;\n  label?: string;\n  mutationOptions?: UseMutationOptions<\n    RecordType,\n    MutationOptionsError,\n    CreateParams<RecordType> | UpdateParams<RecordType>\n  >;\n  transform?: TransformData;\n  variant?:\n    | \"default\"\n    | \"destructive\"\n    | \"outline\"\n    | \"secondary\"\n    | \"ghost\"\n    | \"link\";\n}\n\nexport type SaveButtonProps<RecordType extends RaRecord = RaRecord> =\n  Props<RecordType> &\n    React.ComponentProps<\"button\"> & {\n      alwaysEnable?: boolean;\n    };\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst valueOrDefault = (value: any, defaultValue: any) =>\n  typeof value === \"undefined\" ? defaultValue : value;\n\nexport {\n  // eslint-disable-next-line react-refresh/only-export-components\n  useFormField,\n  Form,\n  FormField,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormError,\n  SaveButton,\n};\n",
			"type": "components:ui"
		}
	],
	"tailwind": {
		"config": {}
	},
	"betterQuery": {
		"operations": ["create", "update"],
		"hook": "useQuery(\"resource\").create() / update()",
		"example": "const { data } = useQuery(\"resource\").create() / update();\n// Use in component"
	}
}
