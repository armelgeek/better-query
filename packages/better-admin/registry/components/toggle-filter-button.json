{
  "name": "toggle-filter-button",
  "type": "components:ui",
  "category": "buttons",
  "description": "Button to toggle filter visibility",
  "dependencies": {
    "shadcn": [
      "button",
      "tooltip"
    ],
    "npm": []
  },
  "registryDependencies": [],
  "files": [
    {
      "path": "components/admin/toggle-filter-button.tsx",
      "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { useListContext, useTranslate } from \"ra-core\";\nimport matches from \"lodash/matches\";\nimport pickBy from \"lodash/pickBy\";\nimport { CircleX } from \"lucide-react\";\n\nexport const ToggleFilterButton = ({\n  label,\n  size = \"sm\",\n  value,\n  className,\n}: {\n  label: React.ReactElement | string;\n  value: any;\n  className?: string;\n  size?: \"default\" | \"sm\" | \"lg\" | \"icon\" | null | undefined;\n}) => {\n  const { filterValues, setFilters } = useListContext();\n  const translate = useTranslate();\n  const isSelected = getIsSelected(value, filterValues);\n  const handleClick = () => setFilters(toggleFilter(value, filterValues));\n  return (\n    <Button\n      variant={isSelected ? \"secondary\" : \"ghost\"}\n      onClick={handleClick}\n      className={cn(\n        \"cursor-pointer\",\n        \"flex flex-row items-center justify-between gap-2 px-2.5 w-full\",\n        className,\n      )}\n      size={size}\n    >\n      {typeof label === \"string\" ? translate(label, { _: label }) : label}\n      {isSelected && <CircleX className=\"opacity-50\" />}\n    </Button>\n  );\n};\n\nconst toggleFilter = (value: any, filters: any) => {\n  const isSelected = matches(\n    pickBy(value, (val) => typeof val !== \"undefined\"),\n  )(filters);\n\n  if (isSelected) {\n    const keysToRemove = Object.keys(value);\n    return Object.keys(filters).reduce(\n      (acc, key) =>\n        keysToRemove.includes(key) ? acc : { ...acc, [key]: filters[key] },\n      {},\n    );\n  }\n\n  return { ...filters, ...value };\n};\n\nconst getIsSelected = (value: any, filters: any) =>\n  matches(pickBy(value, (val) => typeof val !== \"undefined\"))(filters);\n",
      "type": "components:ui"
    }
  ],
  "tailwind": {
    "config": {}
  }
}