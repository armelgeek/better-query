{
  "name": "data-table",
  "type": "components:ui",
  "category": "data-display",
  "description": "A powerful data table with sorting, filtering, pagination, and bulk actions",
  "dependencies": {
    "shadcn": [
      "table",
      "card"
    ],
    "npm": []
  },
  "registryDependencies": [],
  "files": [
    {
      "path": "components/admin/data-table.tsx",
      "content": "import {\n  Children,\n  createElement,\n  isValidElement,\n  useCallback,\n  type ReactNode,\n} from \"react\";\nimport {\n  DataTableBase,\n  DataTableBaseProps,\n  DataTableRenderContext,\n  ExtractRecordPaths,\n  FieldTitle,\n  HintedString,\n  Identifier,\n  RaRecord,\n  RecordContextProvider,\n  SortPayload,\n  useDataTableCallbacksContext,\n  useDataTableConfigContext,\n  useDataTableDataContext,\n  useDataTableRenderContext,\n  useDataTableSelectedIdsContext,\n  useDataTableSortContext,\n  useDataTableStoreContext,\n  useGetPathForRecordCallback,\n  useRecordContext,\n  useResourceContext,\n  useStore,\n  useTranslate,\n  useTranslateLabel,\n} from \"ra-core\";\nimport { useNavigate } from \"react-router\";\nimport { ArrowDownAZ, ArrowUpZA } from \"lucide-react\";\nimport get from \"lodash/get\";\nimport { cn } from \"@/lib/utils\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport {\n  ColumnsSelector,\n  ColumnsSelectorItem,\n} from \"@/components/admin/columns-button\";\nimport { NumberField } from \"@/components/admin/number-field\";\nimport {\n  BulkActionsToolbar,\n  BulkActionsToolbarChildren,\n} from \"@/components/admin/bulk-actions-toolbar\";\n\nconst defaultBulkActionButtons = <BulkActionsToolbarChildren />;\n\nexport function DataTable<RecordType extends RaRecord = RaRecord>(\n  props: DataTableProps<RecordType>\n) {\n  const {\n    children,\n    className,\n    rowClassName,\n    bulkActionButtons = defaultBulkActionButtons,\n    bulkActionsToolbar,\n    ...rest\n  } = props;\n  const hasBulkActions = !!bulkActionsToolbar || bulkActionButtons !== false;\n  const resourceFromContext = useResourceContext(props);\n  const storeKey = props.storeKey || `${resourceFromContext}.datatable`;\n  const [columnRanks] = useStore<number[]>(`${storeKey}_columnRanks`);\n  const columns = columnRanks\n    ? reorderChildren(children, columnRanks)\n    : children;\n\n  return (\n    <DataTableBase<RecordType>\n      hasBulkActions={hasBulkActions}\n      loading={null}\n      empty={<DataTableEmpty />}\n      {...rest}\n    >\n      <div className={cn(\"rounded-md border\", className)}>\n        <Table>\n          <DataTableRenderContext.Provider value=\"header\">\n            <DataTableHead>{columns}</DataTableHead>\n          </DataTableRenderContext.Provider>\n          <DataTableBody<RecordType> rowClassName={rowClassName}>\n            {columns}\n          </DataTableBody>\n        </Table>\n      </div>\n      {bulkActionsToolbar ??\n        (bulkActionButtons !== false && (\n          <BulkActionsToolbar>\n            {isValidElement(bulkActionButtons)\n              ? bulkActionButtons\n              : defaultBulkActionButtons}\n          </BulkActionsToolbar>\n        ))}\n      <DataTableRenderContext.Provider value=\"columnsSelector\">\n        <ColumnsSelector>{children}</ColumnsSelector>\n      </DataTableRenderContext.Provider>\n    </DataTableBase>\n  );\n}\n\nDataTable.Col = DataTableColumn;\nDataTable.NumberCol = DataTableNumberColumn;\n\nconst DataTableHead = ({ children }: { children: ReactNode }) => {\n  const data = useDataTableDataContext();\n  const { hasBulkActions = false } = useDataTableConfigContext();\n  const { onSelect } = useDataTableCallbacksContext();\n  const selectedIds = useDataTableSelectedIdsContext();\n  const handleToggleSelectAll = (checked: boolean) => {\n    if (!onSelect || !data || !selectedIds) return;\n    onSelect(\n      checked\n        ? selectedIds.concat(\n            data\n              .filter((record) => !selectedIds.includes(record.id))\n              .map((record) => record.id)\n          )\n        : []\n    );\n  };\n  const selectableIds = Array.isArray(data)\n    ? data.map((record) => record.id)\n    : [];\n  return (\n    <TableHeader>\n      <TableRow>\n        {hasBulkActions ? (\n          <TableHead className=\"w-8\">\n            <Checkbox\n              onCheckedChange={handleToggleSelectAll}\n              checked={\n                selectedIds &&\n                selectedIds.length > 0 &&\n                selectableIds.length > 0 &&\n                selectableIds.every((id) => selectedIds.includes(id))\n              }\n              className=\"mb-2\"\n            />\n          </TableHead>\n        ) : null}\n        {children}\n      </TableRow>\n    </TableHeader>\n  );\n};\n\nconst DataTableBody = <RecordType extends RaRecord = RaRecord>({\n  children,\n  rowClassName,\n}: {\n  children: ReactNode;\n  rowClassName?: (record: RecordType) => string | undefined;\n}) => {\n  const data = useDataTableDataContext();\n  return (\n    <TableBody>\n      {data?.map((record, rowIndex) => (\n        <RecordContextProvider\n          value={record}\n          key={record.id ?? `row${rowIndex}`}\n        >\n          <DataTableRow className={rowClassName?.(record)}>\n            {children}\n          </DataTableRow>\n        </RecordContextProvider>\n      ))}\n    </TableBody>\n  );\n};\n\nconst DataTableRow = ({\n  children,\n  className,\n}: {\n  children: ReactNode;\n  className?: string;\n}) => {\n  const { rowClick, handleToggleItem } = useDataTableCallbacksContext();\n  const selectedIds = useDataTableSelectedIdsContext();\n  const { hasBulkActions = false } = useDataTableConfigContext();\n\n  const record = useRecordContext();\n  if (!record) {\n    throw new Error(\"DataTableRow can only be used within a RecordContext\");\n  }\n\n  const resource = useResourceContext();\n  if (!resource) {\n    throw new Error(\"DataTableRow can only be used within a ResourceContext\");\n  }\n\n  const navigate = useNavigate();\n  const getPathForRecord = useGetPathForRecordCallback();\n\n  const handleToggle = useCallback(\n    (event: React.MouseEvent) => {\n      event.stopPropagation();\n      if (!handleToggleItem) return;\n      handleToggleItem(record.id, event);\n    },\n    [handleToggleItem, record.id]\n  );\n\n  const handleClick = useCallback(async () => {\n    const temporaryLink =\n      typeof rowClick === \"function\"\n        ? rowClick(record.id, resource, record)\n        : rowClick;\n\n    const link = isPromise(temporaryLink) ? await temporaryLink : temporaryLink;\n\n    const path = await getPathForRecord({\n      record,\n      resource,\n      link,\n    });\n    if (path === false || path == null) {\n      return;\n    }\n    navigate(path, {\n      state: { _scrollToTop: true },\n    });\n  }, [record, resource, rowClick, navigate, getPathForRecord]);\n\n  return (\n    <TableRow\n      key={record.id}\n      onClick={handleClick}\n      className={cn(rowClick !== false && \"cursor-pointer\", className)}\n    >\n      {hasBulkActions ? (\n        <TableCell className=\"flex w-8\" onClick={handleToggle}>\n          <Checkbox\n            checked={selectedIds?.includes(record.id)}\n            onClick={handleToggle}\n          />\n        </TableCell>\n      ) : null}\n      {children}\n    </TableRow>\n  );\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isPromise = (value: any): value is Promise<any> =>\n  value && typeof value.then === \"function\";\n\nconst DataTableEmpty = () => {\n  return (\n    <Alert>\n      <AlertDescription>No results found.</AlertDescription>\n    </Alert>\n  );\n};\n\nexport interface DataTableProps<RecordType extends RaRecord = RaRecord>\n  extends Partial<DataTableBaseProps<RecordType>> {\n  children: ReactNode;\n  className?: string;\n  rowClassName?: (record: RecordType) => string | undefined;\n  bulkActionButtons?: ReactNode;\n  bulkActionsToolbar?: ReactNode;\n}\n\nexport function DataTableColumn<\n  RecordType extends RaRecord<Identifier> = RaRecord<Identifier>\n>(props: DataTableColumnProps<RecordType>) {\n  const renderContext = useDataTableRenderContext();\n  switch (renderContext) {\n    case \"columnsSelector\":\n      return <ColumnsSelectorItem<RecordType> {...props} />;\n    case \"header\":\n      return <DataTableHeadCell {...props} />;\n    case \"data\":\n      return <DataTableCell {...props} />;\n  }\n}\n\n/**\n * Reorder children based on columnRanks\n *\n * Note that columnRanks may be shorter than the number of children\n */\nconst reorderChildren = (children: ReactNode, columnRanks: number[]) =>\n  Children.toArray(children).reduce((acc: ReactNode[], child, index) => {\n    const rank = columnRanks.indexOf(index);\n    if (rank === -1) {\n      // if the column is not in columnRanks, keep it at the same index\n      acc[index] = child;\n    } else {\n      // if the column is in columnRanks, move it to the rank index\n      acc[rank] = child;\n    }\n    return acc;\n  }, []);\n\nfunction DataTableHeadCell<\n  RecordType extends RaRecord<Identifier> = RaRecord<Identifier>\n>(props: DataTableColumnProps<RecordType>) {\n  const {\n    disableSort,\n    source,\n    label,\n    sortByOrder,\n    className,\n    headerClassName,\n  } = props;\n\n  const sort = useDataTableSortContext();\n  const { handleSort } = useDataTableCallbacksContext();\n  const resource = useResourceContext();\n  const translate = useTranslate();\n  const translateLabel = useTranslateLabel();\n  const { storeKey, defaultHiddenColumns } = useDataTableStoreContext();\n  const [hiddenColumns] = useStore<string[]>(storeKey, defaultHiddenColumns);\n  const isColumnHidden = hiddenColumns.includes(source!);\n  if (isColumnHidden) return null;\n\n  const nextSortOrder =\n    sort && sort.field === source\n      ? oppositeOrder[sort.order]\n      : sortByOrder ?? \"ASC\";\n  const fieldLabel = translateLabel({\n    label: typeof label === \"string\" ? label : undefined,\n    resource,\n    source,\n  });\n  const sortLabel = translate(\"ra.sort.sort_by\", {\n    field: fieldLabel,\n    field_lower_first:\n      typeof fieldLabel === \"string\"\n        ? fieldLabel.charAt(0).toLowerCase() + fieldLabel.slice(1)\n        : undefined,\n    order: translate(`ra.sort.${nextSortOrder}`),\n    _: translate(\"ra.action.sort\"),\n  });\n\n  return (\n    <TableHead className={cn(className, headerClassName)}>\n      {handleSort && sort && !disableSort && source ? (\n        <TooltipProvider>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"-ml-3 -mr-3 h-8 data-[state=open]:bg-accent cursor-pointer\"\n                data-field={source}\n                onClick={handleSort}\n              >\n                {headerClassName?.includes(\"text-right\") ? null : (\n                  <FieldTitle\n                    label={label}\n                    source={source}\n                    resource={resource}\n                  />\n                )}\n                {sort.field === source ? (\n                  sort.order === \"ASC\" ? (\n                    <ArrowDownAZ className=\"ml-2 h-6 w-6\" />\n                  ) : (\n                    <ArrowUpZA className=\"ml-2 h-6 w-6\" />\n                  )\n                ) : null}\n                {headerClassName?.includes(\"text-right\") ? (\n                  <FieldTitle\n                    label={label}\n                    source={source}\n                    resource={resource}\n                  />\n                ) : null}\n              </Button>\n            </TooltipTrigger>\n            <TooltipContent>\n              <p>{sortLabel}</p>\n            </TooltipContent>\n          </Tooltip>\n        </TooltipProvider>\n      ) : (\n        <FieldTitle label={label} source={source} resource={resource} />\n      )}\n    </TableHead>\n  );\n}\n\nconst oppositeOrder: Record<SortPayload[\"order\"], SortPayload[\"order\"]> = {\n  ASC: \"DESC\",\n  DESC: \"ASC\",\n};\n\nfunction DataTableCell<\n  RecordType extends RaRecord<Identifier> = RaRecord<Identifier>\n>(props: DataTableColumnProps<RecordType>) {\n  const {\n    children,\n    render,\n    field,\n    source,\n    className,\n    cellClassName,\n    conditionalClassName,\n  } = props;\n\n  const { storeKey, defaultHiddenColumns } = useDataTableStoreContext();\n  const [hiddenColumns] = useStore<string[]>(storeKey, defaultHiddenColumns);\n  const record = useRecordContext<RecordType>();\n  const isColumnHidden = hiddenColumns.includes(source!);\n  if (isColumnHidden) return null;\n  if (!render && !field && !children && !source) {\n    throw new Error(\n      \"DataTableColumn: Missing at least one of the following props: render, field, children, or source\"\n    );\n  }\n\n  return (\n    <TableCell\n      className={cn(\n        \"py-1\",\n        className,\n        cellClassName,\n        record && conditionalClassName?.(record)\n      )}\n    >\n      {children ??\n        (render\n          ? record && render(record)\n          : field\n          ? createElement(field, { source })\n          : get(record, source!))}\n    </TableCell>\n  );\n}\n\nexport interface DataTableColumnProps<\n  RecordType extends RaRecord<Identifier> = RaRecord<Identifier>\n> {\n  className?: string;\n  cellClassName?: string;\n  headerClassName?: string;\n  conditionalClassName?: (record: RecordType) => string | false | undefined;\n  children?: ReactNode;\n  render?: (record: RecordType) => React.ReactNode;\n  field?: React.ElementType;\n  source?: NoInfer<HintedString<ExtractRecordPaths<RecordType>>>;\n  label?: React.ReactNode;\n  disableSort?: boolean;\n  sortByOrder?: SortPayload[\"order\"];\n}\n\nexport function DataTableNumberColumn<\n  RecordType extends RaRecord<Identifier> = RaRecord<Identifier>\n>(props: DataTableNumberColumnProps<RecordType>) {\n  const {\n    source,\n    options,\n    locales,\n    className,\n    headerClassName,\n    cellClassName,\n    ...rest\n  } = props;\n  return (\n    <DataTableColumn\n      source={source}\n      {...rest}\n      className={className}\n      headerClassName={cn(\"text-right\", headerClassName)}\n      cellClassName={cn(\"text-right\", cellClassName)}\n    >\n      <NumberField source={source} options={options} locales={locales} />\n    </DataTableColumn>\n  );\n}\n\nexport interface DataTableNumberColumnProps<\n  RecordType extends RaRecord<Identifier> = RaRecord<Identifier>\n> extends DataTableColumnProps<RecordType> {\n  source: NoInfer<HintedString<ExtractRecordPaths<RecordType>>>;\n  locales?: string | string[];\n  options?: Intl.NumberFormatOptions;\n}\n",
      "type": "components:ui"
    }
  ],
  "tailwind": {
    "config": {}
  },
  "betterQuery": {
    "operations": [
      "list"
    ],
    "hook": "useQuery(\"resource\").list()",
    "example": "const { data } = useQuery(\"resource\").list();\n// Use in component"
  }
}