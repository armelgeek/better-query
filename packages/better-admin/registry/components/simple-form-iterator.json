{
	"name": "simple-form-iterator",
	"type": "components:ui",
	"category": "forms",
	"description": "Repeatable form fields for arrays",
	"dependencies": {
		"shadcn": ["form", "input", "label", "button"],
		"npm": []
	},
	"registryDependencies": [],
	"files": [
		{
			"path": "components/admin/simple-form-iterator.tsx",
			"content": "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport get from \"lodash/get\";\nimport * as React from \"react\";\nimport {\n  Children,\n  type ReactElement,\n  ReactNode,\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  ArrayInputContextValue,\n  FormDataConsumer,\n  RecordContextProvider,\n  SimpleFormIteratorContext,\n  SimpleFormIteratorItemContext,\n  SimpleFormIteratorItemContextValue,\n  SourceContextProvider,\n  type RaRecord,\n  useArrayInput,\n  useRecordContext,\n  useResourceContext,\n  useSimpleFormIterator,\n  useSimpleFormIteratorItem,\n  useSourceContext,\n  useTranslate,\n  useWrappedSource,\n} from \"ra-core\";\nimport { type UseFieldArrayReturn, useFormContext } from \"react-hook-form\";\nimport {\n  ArrowDownCircle,\n  ArrowUpCircle,\n  PlusCircle,\n  Trash,\n  XCircle,\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { Confirm } from \"@/components/admin/confirm\";\nimport { IconButtonWithTooltip } from \"@/components/admin/icon-button-with-tooltip.tsx\";\n\ntype GetItemLabelFunc = (index: number) => string | ReactElement;\n\nexport const SimpleFormIterator = (props: SimpleFormIteratorProps) => {\n  const {\n    addButton = defaultAddItemButton,\n    removeButton,\n    reOrderButtons,\n    children,\n    className,\n    resource,\n    disabled,\n    disableAdd = false,\n    disableClear,\n    disableRemove = false,\n    disableReordering,\n    inline,\n    getItemLabel = false,\n  } = props;\n\n  const finalSource = useWrappedSource(\"\");\n  if (!finalSource) {\n    throw new Error(\n      \"SimpleFormIterator can only be called within an iterator input like ArrayInput\",\n    );\n  }\n\n  const [confirmIsOpen, setConfirmIsOpen] = useState<boolean>(false);\n  const { append, fields, move, remove, replace } = useArrayInput(props);\n  const { trigger, getValues } = useFormContext();\n  const translate = useTranslate();\n  const record = useRecordContext(props);\n  const initialDefaultValue = useRef({});\n\n  const removeField = useCallback(\n    (index: number) => {\n      remove(index);\n      const isScalarArray = getValues(finalSource).every(\n        (value: any) => typeof value !== \"object\",\n      );\n      if (isScalarArray) {\n        // Trigger validation on the Array to avoid ghost errors.\n        // Otherwise, validation errors on removed fields might still be displayed\n        trigger(finalSource);\n      }\n    },\n    [remove, trigger, finalSource, getValues],\n  );\n\n  if (fields.length > 0) {\n    const { id: _id, ...rest } = fields[0];\n    initialDefaultValue.current = rest;\n    for (const k in initialDefaultValue.current) {\n      // @ts-expect-error: reset fields\n      initialDefaultValue.current[k] = null;\n    }\n  }\n\n  const addField = useCallback(\n    (item: any = undefined) => {\n      let defaultValue = item;\n      if (item == null) {\n        defaultValue = initialDefaultValue.current;\n        if (\n          Children.count(children) === 1 &&\n          React.isValidElement(Children.only(children)) &&\n          // @ts-expect-error: Check if the child has a source prop\n          !Children.only(children).props.source &&\n          // Make sure it's not a FormDataConsumer\n          // @ts-expect-error: Check if the child is a FormDataConsumer\n          Children.only(children).type !== FormDataConsumer\n        ) {\n          // ArrayInput used for an array of scalar values\n          // (e.g. tags: ['foo', 'bar'])\n          defaultValue = \"\";\n        } else {\n          // ArrayInput used for an array of objects\n          // (e.g. authors: [{ firstName: 'John', lastName: 'Doe' }, { firstName: 'Jane', lastName: 'Doe' }])\n          defaultValue = defaultValue || ({} as Record<string, unknown>);\n          Children.forEach(children, (input) => {\n            if (\n              React.isValidElement(input) &&\n              input.type !== FormDataConsumer &&\n              // @ts-expect-error: Check if the child has a source prop\n              input.props.source\n            ) {\n              // @ts-expect-error: Check if the child has a source prop\n              defaultValue[input.props.source] =\n                // @ts-expect-error: Check if the child has a source prop\n                input.props.defaultValue ?? null;\n            }\n          });\n        }\n      }\n      append(defaultValue);\n    },\n    [append, children],\n  );\n\n  const handleReorder = useCallback(\n    (origin: number, destination: number) => {\n      move(origin, destination);\n    },\n    [move],\n  );\n\n  const handleArrayClear = useCallback(() => {\n    replace([]);\n    setConfirmIsOpen(false);\n  }, [replace]);\n\n  const records = get(record, finalSource);\n\n  const context = useMemo(\n    () => ({\n      total: fields.length,\n      add: addField,\n      remove: removeField,\n      reOrder: handleReorder,\n      source: finalSource,\n    }),\n    [addField, fields.length, handleReorder, removeField, finalSource],\n  );\n  return fields ? (\n    <SimpleFormIteratorContext.Provider value={context}>\n      <div className={cn(\"w-full\", disabled && \"disabled\", className)}>\n        <ul className=\"p-0 m-0 flex flex-col gap-2\">\n          {fields.map((member, index) => (\n            <SimpleFormIteratorItem\n              key={member.id}\n              disabled={disabled}\n              disableRemove={disableRemove}\n              disableReordering={disableReordering}\n              fields={fields}\n              getItemLabel={getItemLabel}\n              index={index}\n              onRemoveField={removeField}\n              onReorder={handleReorder}\n              record={(records && records[index]) || {}}\n              removeButton={removeButton}\n              reOrderButtons={reOrderButtons}\n              resource={resource}\n              inline={inline}\n            >\n              {children}\n            </SimpleFormIteratorItem>\n          ))}\n        </ul>\n        {!disabled && !(disableAdd && (disableClear || disableRemove)) && (\n          <div className=\"flex flex-row items-center gap-2\">\n            {!disableAdd && addButton}\n            {fields.length > 0 && !disableClear && !disableRemove && (\n              <>\n                <Confirm\n                  isOpen={confirmIsOpen}\n                  title={translate(\"ra.action.clear_array_input\")}\n                  content={translate(\"ra.message.clear_array_input\")}\n                  onConfirm={handleArrayClear}\n                  onClose={() => setConfirmIsOpen(false)}\n                />\n                <ClearArrayButton onClick={() => setConfirmIsOpen(true)} />\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </SimpleFormIteratorContext.Provider>\n  ) : null;\n};\n\nexport interface SimpleFormIteratorProps extends Partial<UseFieldArrayReturn> {\n  addButton?: ReactElement;\n  children?: ReactElement | ReactElement[];\n  className?: string;\n  readOnly?: boolean;\n  disabled?: boolean;\n  disableAdd?: boolean;\n  disableClear?: boolean;\n  disableRemove?: boolean | DisableRemoveFunction;\n  disableReordering?: boolean;\n  fullWidth?: boolean;\n  getItemLabel?: boolean | GetItemLabelFunc;\n  inline?: boolean;\n  meta?: {\n    // the type defined in FieldArrayRenderProps says error is boolean, which is wrong.\n    error?: any;\n    submitFailed?: boolean;\n  };\n  record?: RaRecord;\n  removeButton?: ReactElement;\n  reOrderButtons?: ReactElement;\n  resource?: string;\n  source?: string;\n}\n\nexport const SimpleFormIteratorItem = React.forwardRef(\n  (\n    props: SimpleFormIteratorItemProps,\n    ref: React.ForwardedRef<HTMLLIElement>,\n  ) => {\n    const {\n      children,\n      disabled,\n      disableReordering,\n      disableRemove,\n      getItemLabel,\n      index,\n      inline,\n      record,\n      removeButton = defaultRemoveItemButton,\n      reOrderButtons = defaultReOrderButtons,\n    } = props;\n    const resource = useResourceContext(props);\n    if (!resource) {\n      throw new Error(\n        \"SimpleFormIteratorItem must be used in a ResourceContextProvider or be passed a resource prop.\",\n      );\n    }\n    const { total, reOrder, remove } = useSimpleFormIterator();\n    // Returns a boolean to indicate whether to disable the remove button for certain fields.\n    // If disableRemove is a function, then call the function with the current record to\n    // determining if the button should be disabled. Otherwise, use a boolean property that\n    // enables or disables the button for all of the fields.\n    const disableRemoveField = (record: RaRecord) => {\n      if (typeof disableRemove === \"boolean\") {\n        return disableRemove;\n      }\n      return disableRemove && disableRemove(record);\n    };\n\n    const context = useMemo<SimpleFormIteratorItemContextValue>(\n      () => ({\n        index,\n        total,\n        reOrder: (newIndex) => reOrder(index, newIndex),\n        remove: () => remove(index),\n      }),\n      [index, total, reOrder, remove],\n    );\n\n    const label =\n      typeof getItemLabel === \"function\" ? getItemLabel(index) : getItemLabel;\n\n    const parentSourceContext = useSourceContext();\n    const sourceContext = useMemo(\n      () => ({\n        getSource: (source: string) => {\n          if (!source) {\n            // source can be empty for scalar values, e.g.\n            // <ArrayInput source=\"tags\" /> => SourceContext is \"tags\"\n            //   <SimpleFormIterator> => SourceContext is \"tags.0\"\n            //      <TextInput /> => use its parent's getSource so finalSource = \"tags.0\"\n            //   </SimpleFormIterator>\n            // </ArrayInput>\n            return parentSourceContext.getSource(`${index}`);\n          } else {\n            // Normal input with source, e.g.\n            // <ArrayInput source=\"orders\" /> => SourceContext is \"orders\"\n            //   <SimpleFormIterator> => SourceContext is \"orders.0\"\n            //      <DateInput source=\"date\" /> => use its parent's getSource so finalSource = \"orders.0.date\"\n            //   </SimpleFormIterator>\n            // </ArrayInput>\n            return parentSourceContext.getSource(`${index}.${source}`);\n          }\n        },\n        getLabel: (source: string) => {\n          // <ArrayInput source=\"orders\" /> => LabelContext is \"orders\"\n          //   <SimpleFormIterator> => LabelContext is ALSO \"orders\"\n          //      <DateInput source=\"date\" /> => use its parent's getLabel so finalLabel = \"orders.date\"\n          //   </SimpleFormIterator>\n          // </ArrayInput>\n          //\n          // we don't prefix with the index to avoid that translation keys contain it\n          return parentSourceContext.getLabel(source);\n        },\n      }),\n      [index, parentSourceContext],\n    );\n\n    return (\n      <SimpleFormIteratorItemContext.Provider value={context}>\n        <li\n          ref={ref}\n          className={cn(\n            \"flex flex-row items-start justify-between gap-2 pb-2 border-b border-border last:border-b-0\",\n            // Align the buttons with the input\n            \"[&:has(label)>.simple-form-iterator-item-actions]:pt-10\",\n          )}\n        >\n          {label != null && label !== false && (\n            <p className=\"text-sm text-muted-foreground mb-2\">{label}</p>\n          )}\n          <SourceContextProvider value={sourceContext}>\n            <RecordContextProvider value={record}>\n              <div\n                className={cn(\n                  \"flex flex-1 gap-2\",\n                  inline ? \"flex-col sm:flex-row gap-2\" : \"flex-col\",\n                )}\n              >\n                {children}\n              </div>\n            </RecordContextProvider>\n          </SourceContextProvider>\n          {!disabled && (\n            <div className=\"simple-form-iterator-item-actions flex flex-row h-9 items-center gap-1\">\n              {!disableReordering && reOrderButtons}\n              {!disableRemoveField(record) && removeButton}\n            </div>\n          )}\n        </li>\n      </SimpleFormIteratorItemContext.Provider>\n    );\n  },\n);\n\nexport type DisableRemoveFunction = (record: RaRecord) => boolean;\n\nexport type SimpleFormIteratorItemProps = Partial<ArrayInputContextValue> & {\n  children?: ReactNode;\n  disabled?: boolean;\n  disableRemove?: boolean | DisableRemoveFunction;\n  disableReordering?: boolean;\n  getItemLabel?: boolean | GetItemLabelFunc;\n  index: number;\n  inline?: boolean;\n  onRemoveField: (index: number) => void;\n  onReorder: (origin: number, destination: number) => void;\n  record: RaRecord;\n  removeButton?: ReactElement;\n  reOrderButtons?: ReactElement;\n  resource?: string;\n  source?: string;\n};\n\nexport const AddItemButton = (props: React.ComponentProps<\"button\">) => {\n  const { add, source } = useSimpleFormIterator();\n  const { className, ...rest } = props;\n  const translate = useTranslate();\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => add()}\n            className={cn(\"button-add\", `button-add-${source}`, className)}\n            {...rest}\n          >\n            <PlusCircle className=\"h-5 w-5\" />\n          </Button>\n        </TooltipTrigger>\n        <TooltipContent>{translate(\"ra.action.add\")}</TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n};\n\nexport const ReOrderButtons = ({ className }: { className?: string }) => {\n  const { index, total, reOrder } = useSimpleFormIteratorItem();\n  const { source } = useSimpleFormIterator();\n\n  return (\n    <span\n      className={cn(\n        \"button-reorder\",\n        `button-reorder-${source}-${index}`,\n        className,\n      )}\n    >\n      <IconButtonWithTooltip\n        label=\"ra.action.move_up\"\n        onClick={() => reOrder(index - 1)}\n        disabled={index <= 0}\n      >\n        <ArrowUpCircle className=\"h-4 w-4\" />\n      </IconButtonWithTooltip>\n      <IconButtonWithTooltip\n        label=\"ra.action.move_down\"\n        onClick={() => reOrder(index + 1)}\n        disabled={total == null || index >= total - 1}\n      >\n        <ArrowDownCircle className=\"h-4 w-4\" />\n      </IconButtonWithTooltip>\n    </span>\n  );\n};\n\nexport const ClearArrayButton = (props: React.ComponentProps<\"button\">) => {\n  const translate = useTranslate();\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <Button type=\"button\" variant=\"ghost\" size=\"icon\" {...props}>\n            <Trash className=\"h-5 w-5 text-red-500\" />\n          </Button>\n        </TooltipTrigger>\n        <TooltipContent>\n          {translate(\"ra.action.clear_array_input\")}\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n};\n\nexport const RemoveItemButton = (props: React.ComponentProps<\"button\">) => {\n  const { remove, index } = useSimpleFormIteratorItem();\n  const { source } = useSimpleFormIterator();\n  const { className, ...rest } = props;\n  const translate = useTranslate();\n\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => remove()}\n            className={cn(\n              \"button-remove\",\n              `button-remove-${source}-${index}`,\n              className,\n            )}\n            {...rest}\n          >\n            <XCircle className=\"h-5 w-5 text-red-500\" />\n          </Button>\n        </TooltipTrigger>\n        <TooltipContent>{translate(\"ra.action.remove\")}</TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n};\n\nconst defaultAddItemButton = <AddItemButton />;\nconst defaultRemoveItemButton = <RemoveItemButton />;\nconst defaultReOrderButtons = <ReOrderButtons />;\n",
			"type": "components:ui"
		}
	],
	"tailwind": {
		"config": {}
	}
}
