{
	"name": "filter-form",
	"type": "components:ui",
	"category": "forms",
	"description": "Form for filtering list data",
	"dependencies": {
		"shadcn": ["form", "input", "label", "button"],
		"npm": []
	},
	"registryDependencies": [],
	"files": [
		{
			"path": "components/admin/filter-form.tsx",
			"content": "import * as React from \"react\";\nimport {\n  type HtmlHTMLAttributes,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\nimport get from \"lodash/get\";\nimport isEqual from \"lodash/isEqual\";\nimport queryString from \"query-string\";\nimport {\n  FieldTitle,\n  FilterLiveForm,\n  useListContext,\n  useResourceContext,\n  useTranslate,\n} from \"ra-core\";\nimport { useNavigate } from \"react-router\";\nimport {\n  Bookmark,\n  BookmarkMinus,\n  BookmarkPlus,\n  Check,\n  Filter,\n  MinusCircle,\n  X,\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { FilterElementProps, useFilterContext } from \"@/hooks/filter-context\";\nimport {\n  extractValidSavedQueries,\n  SavedQuery,\n  useSavedQueries,\n} from \"@/hooks/saved-queries.tsx\";\nimport { Button } from \"@/components/ui/button.tsx\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  AddSavedQueryDialog,\n  RemoveSavedQueryDialog,\n} from \"@/components/admin/saved-queries.tsx\";\n\nexport const FilterForm = (inProps: FilterFormProps) => {\n  const { filters: filtersProps, ...rest } = inProps;\n  const filters = useFilterContext() || filtersProps;\n\n  return (\n    <FilterLiveForm formComponent={StyledForm} {...sanitizeRestProps(rest)}>\n      <FilterFormBase filters={filters} />\n    </FilterLiveForm>\n  );\n};\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface FilterFormProps extends FilterFormBaseProps {}\n\n/**\n * @deprecated Use FilterFormBase from `ra-core` once available.\n */\nexport const FilterFormBase = (props: FilterFormBaseProps) => {\n  const { filters } = props;\n  const resource = useResourceContext(props);\n  const { displayedFilters = {}, filterValues, hideFilter } = useListContext();\n\n  useEffect(() => {\n    if (!filters) return;\n    filters.forEach((filter) => {\n      if (filter.props.alwaysOn && filter.props.defaultValue) {\n        throw new Error(\n          \"Cannot use alwaysOn and defaultValue on a filter input. Please set the filterDefaultValues props on the <List> element instead.\",\n        );\n      }\n    });\n  }, [filters]);\n\n  const getShownFilters = () => {\n    if (!filters) return [];\n    const values = filterValues;\n    return filters.filter((filterElement) => {\n      const filterValue = get(values, filterElement.props.source);\n      return (\n        filterElement.props.alwaysOn ||\n        displayedFilters[filterElement.props.source] ||\n        !isEmptyValue(filterValue)\n      );\n    });\n  };\n\n  const handleHide = useCallback(\n    (event: React.MouseEvent<HTMLElement>) =>\n      hideFilter(event.currentTarget.dataset.key!),\n    [hideFilter],\n  );\n\n  return (\n    <>\n      {getShownFilters().map((filterElement) => (\n        <FilterFormInput\n          key={filterElement.key || filterElement.props.source}\n          filterElement={filterElement}\n          handleHide={handleHide}\n          resource={resource}\n        />\n      ))}\n    </>\n  );\n};\n\nconst sanitizeRestProps = ({\n  hasCreate: _hasCreate,\n  resource: _resource,\n  ...props\n}: Partial<FilterFormBaseProps> & { hasCreate?: boolean }) => props;\n\nexport type FilterFormBaseProps = Omit<\n  HtmlHTMLAttributes<HTMLFormElement>,\n  \"children\"\n> & {\n  className?: string;\n  resource?: string;\n  filters?: React.ReactElement<FilterElementProps>[];\n};\n\nconst StyledForm = (props: React.FormHTMLAttributes<HTMLFormElement>) => {\n  return (\n    <form\n      {...props}\n      className={cn(\n        \"flex flex-row justify-start items-end gap-x-2 gap-y-3 pointer-events-none flex-wrap\",\n        \"[&_.form-helper-text]:hidden\",\n        props.className,\n      )}\n    />\n  );\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isEmptyValue = (filterValue: any): boolean => {\n  if (filterValue === \"\" || filterValue == null) return true;\n\n  // If one of the value leaf is not empty\n  // the value is considered not empty\n  if (typeof filterValue === \"object\") {\n    return Object.keys(filterValue).every((key) =>\n      isEmptyValue(filterValue[key]),\n    );\n  }\n\n  return false;\n};\n\nexport const FilterFormInput = (inProps: FilterFormInputProps) => {\n  const { filterElement, handleHide, className } = inProps;\n  const resource = useResourceContext(inProps);\n  const translate = useTranslate();\n\n  return (\n    <div\n      data-source={filterElement.props.source}\n      className={cn(\n        \"filter-field flex flex-row pointer-events-auto gap-2 relative\",\n        className,\n      )}\n    >\n      {React.cloneElement(filterElement, {\n        resource,\n        record: emptyRecord,\n        size: filterElement.props.size ?? \"small\",\n        helperText: false,\n        // ignore defaultValue in Field because it was already set in Form (via mergedInitialValuesWithDefaultValues)\n        defaultValue: undefined,\n      })}\n      {!filterElement.props.alwaysOn && (\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"hide-filter h-9 w-9 cursor-pointer mt-auto\"\n          onClick={handleHide}\n          data-key={filterElement.props.source}\n          title={translate(\"ra.action.remove_filter\")}\n        >\n          <MinusCircle className=\"h-4 w-4\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport interface FilterFormInputProps {\n  filterElement: React.ReactElement<FilterElementProps>;\n  handleHide: (event: React.MouseEvent<HTMLElement>) => void;\n  className?: string;\n  resource?: string;\n}\n\nconst emptyRecord = {};\n\nexport const FilterButton = (props: FilterButtonProps) => {\n  const {\n    filters: filtersProp,\n    className,\n    disableSaveQuery,\n    size,\n    variant = \"outline\",\n    ...rest\n  } = props;\n  const filters = useFilterContext() || filtersProp;\n  const resource = useResourceContext(props);\n  const translate = useTranslate();\n  if (!resource && !disableSaveQuery) {\n    throw new Error(\n      \"<FilterButton> must be called inside a ResourceContextProvider, or must provide a resource prop\",\n    );\n  }\n  const [savedQueries] = useSavedQueries(resource || \"\");\n  const navigate = useNavigate();\n  const {\n    displayedFilters = {},\n    filterValues,\n    perPage,\n    setFilters,\n    showFilter,\n    hideFilter,\n    sort,\n  } = useListContext();\n  const hasFilterValues = !isEqual(filterValues, {});\n  const validSavedQueries = extractValidSavedQueries(savedQueries);\n  const hasSavedCurrentQuery = validSavedQueries.some((savedQuery) =>\n    isEqual(savedQuery.value, {\n      filter: filterValues,\n      sort,\n      perPage,\n      displayedFilters,\n    }),\n  );\n  const [open, setOpen] = useState(false);\n\n  if (filters === undefined) {\n    throw new Error(\n      \"The <FilterButton> component requires the <List filters> prop to be set\",\n    );\n  }\n\n  const allTogglableFilters = filters.filter(\n    (filterElement: React.ReactElement<FilterElementProps>) =>\n      !filterElement.props.alwaysOn,\n  );\n\n  const handleShow = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ({ source, defaultValue }: { source: string; defaultValue: any }) => {\n      showFilter(source, defaultValue === \"\" ? undefined : defaultValue);\n      // We have to fallback to imperative code because the new FilterFormInput\n      // has no way of knowing it has just been displayed (and thus that it should focus its input)\n      setTimeout(() => {\n        const inputElement = document.querySelector(\n          `input[name='${source}']`,\n        ) as HTMLInputElement;\n        if (inputElement) {\n          inputElement.focus();\n        }\n      }, 50);\n      setOpen(false);\n    },\n    [showFilter, setOpen],\n  );\n\n  const handleRemove = useCallback(\n    ({ source }: { source: string }) => {\n      hideFilter(source);\n      setOpen(false);\n    },\n    [hideFilter, setOpen],\n  );\n\n  // add query dialog state\n  const [addSavedQueryDialogOpen, setAddSavedQueryDialogOpen] = useState(false);\n  const hideAddSavedQueryDialog = (): void => {\n    setAddSavedQueryDialogOpen(false);\n  };\n  const showAddSavedQueryDialog = (): void => {\n    setOpen(false);\n    setAddSavedQueryDialogOpen(true);\n  };\n\n  // remove query dialog state\n  const [removeSavedQueryDialogOpen, setRemoveSavedQueryDialogOpen] =\n    useState(false);\n  const hideRemoveSavedQueryDialog = (): void => {\n    setRemoveSavedQueryDialogOpen(false);\n  };\n  const showRemoveSavedQueryDialog = (): void => {\n    setOpen(false);\n    setRemoveSavedQueryDialogOpen(true);\n  };\n\n  if (\n    allTogglableFilters.length === 0 &&\n    validSavedQueries.length === 0 &&\n    !hasFilterValues\n  ) {\n    return null;\n  }\n  return (\n    <div className={cn(\"inline-block\", className)} {...rest}>\n      <DropdownMenu open={open} onOpenChange={setOpen}>\n        <DropdownMenuTrigger asChild>\n          <Button\n            type=\"button\"\n            className=\"add-filter\"\n            variant={variant}\n            size={size}\n            aria-haspopup=\"true\"\n          >\n            <Filter className=\"h-4 w-4\" />\n            {translate(\"ra.action.add_filter\")}\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"start\" className=\"w-56\">\n          {allTogglableFilters.map(\n            (\n              filterElement: React.ReactElement<FilterElementProps>,\n              index: number,\n            ) => (\n              <FilterButtonMenuItem\n                key={filterElement.props.source}\n                filter={filterElement}\n                displayed={!!displayedFilters[filterElement.props.source]}\n                resource={resource}\n                onShow={handleShow}\n                onHide={handleRemove}\n                autoFocus={index === 0}\n              />\n            ),\n          )}\n          {(hasFilterValues || validSavedQueries.length > 0) && (\n            <DropdownMenuSeparator />\n          )}\n          {validSavedQueries.map((savedQuery: SavedQuery, index: number) =>\n            isEqual(savedQuery.value, {\n              filter: filterValues,\n              sort,\n              perPage,\n              displayedFilters,\n            }) ? (\n              <DropdownMenuItem\n                onClick={showRemoveSavedQueryDialog}\n                key={index}\n              >\n                <BookmarkMinus className=\"h-4 w-4 mr-2\" />\n                {translate(\"ra.saved_queries.remove_label_with_name\", {\n                  _: 'Remove query \"%{name}\"',\n                  name: savedQuery.label,\n                })}\n              </DropdownMenuItem>\n            ) : (\n              <DropdownMenuItem\n                onClick={(): void => {\n                  navigate({\n                    search: queryString.stringify({\n                      filter: JSON.stringify(savedQuery.value.filter),\n                      sort: savedQuery.value.sort?.field,\n                      order: savedQuery.value.sort?.order,\n                      page: 1,\n                      perPage: savedQuery.value.perPage,\n                      displayedFilters: JSON.stringify(\n                        savedQuery.value.displayedFilters,\n                      ),\n                    }),\n                  });\n                  setOpen(false);\n                }}\n                key={index}\n              >\n                <Bookmark className=\"h-4 w-4 mr-2\" />\n                {savedQuery.label}\n              </DropdownMenuItem>\n            ),\n          )}\n          {hasFilterValues && !hasSavedCurrentQuery && !disableSaveQuery && (\n            <DropdownMenuItem onClick={showAddSavedQueryDialog}>\n              <BookmarkPlus className=\"h-4 w-4 mr-2\" />\n              {translate(\"ra.saved_queries.new_label\", {\n                _: \"Save current query...\",\n              })}\n            </DropdownMenuItem>\n          )}\n          {hasFilterValues && (\n            <DropdownMenuItem\n              onClick={() => {\n                setFilters({}, {});\n                setOpen(false);\n              }}\n            >\n              <X className=\"h-4 w-4 mr-2\" />\n              {translate(\"ra.action.remove_all_filters\", {\n                _: \"Remove all filters\",\n              })}\n            </DropdownMenuItem>\n          )}\n        </DropdownMenuContent>\n      </DropdownMenu>\n      {!disableSaveQuery && (\n        <>\n          <AddSavedQueryDialog\n            open={addSavedQueryDialogOpen}\n            onClose={hideAddSavedQueryDialog}\n          />\n          <RemoveSavedQueryDialog\n            open={removeSavedQueryDialogOpen}\n            onClose={hideRemoveSavedQueryDialog}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport interface FilterButtonProps extends HtmlHTMLAttributes<HTMLDivElement> {\n  className?: string;\n  disableSaveQuery?: boolean;\n  filters?: React.ReactElement<FilterElementProps>[];\n  resource?: string;\n  variant?:\n    | \"default\"\n    | \"destructive\"\n    | \"outline\"\n    | \"secondary\"\n    | \"ghost\"\n    | \"link\";\n  size?: \"default\" | \"sm\" | \"lg\" | \"icon\";\n}\n\nexport const FilterButtonMenuItem = React.forwardRef<\n  HTMLDivElement,\n  FilterButtonMenuItemProps\n>((props, ref) => {\n  const { filter, onShow, onHide, displayed } = props;\n  const resource = useResourceContext(props);\n  const handleShow = useCallback(() => {\n    onShow({\n      source: filter.props.source,\n      defaultValue: filter.props.defaultValue,\n    });\n  }, [filter.props.defaultValue, filter.props.source, onShow]);\n  const handleHide = useCallback(() => {\n    onHide({\n      source: filter.props.source,\n    });\n  }, [filter.props.source, onHide]);\n\n  return (\n    <div\n      className={cn(\n        \"new-filter-item flex items-center px-2 py-1.5 text-sm cursor-pointer hover:bg-accent rounded-sm\",\n        filter.props.disabled && \"opacity-50 cursor-not-allowed\",\n      )}\n      data-key={filter.props.source}\n      data-default-value={filter.props.defaultValue}\n      onClick={\n        filter.props.disabled ? undefined : displayed ? handleHide : handleShow\n      }\n      ref={ref}\n      role=\"menuitemcheckbox\"\n      aria-checked={displayed}\n    >\n      <div className=\"flex items-center justify-center w-4 h-4 mr-2\">\n        {displayed && <Check className=\"h-3 w-3\" />}\n      </div>\n      <div>\n        <FieldTitle\n          label={filter.props.label}\n          source={filter.props.source}\n          resource={resource}\n        />\n      </div>\n    </div>\n  );\n});\n\nexport interface FilterButtonMenuItemProps {\n  filter: React.ReactElement<FilterElementProps>;\n  displayed: boolean;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  onShow: (params: { source: string; defaultValue: any }) => void;\n  onHide: (params: { source: string }) => void;\n  resource?: string;\n  autoFocus?: boolean;\n}\n",
			"type": "components:ui"
		}
	],
	"tailwind": {
		"config": {}
	}
}
