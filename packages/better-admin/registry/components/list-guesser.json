{
  "name": "list-guesser",
  "type": "components:ui",
  "category": "views",
  "description": "Automatically generates list views based on data structure",
  "dependencies": {
    "shadcn": [
      "card",
      "separator"
    ],
    "npm": []
  },
  "registryDependencies": [],
  "files": [
    {
      "path": "components/admin/list-guesser.tsx",
      "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport * as React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport {\n  ListBase,\n  getElementsFromRecords,\n  InferredElement,\n  useListContext,\n  usePrevious,\n  useResourceContext,\n  RaRecord,\n} from \"ra-core\";\nimport { useLocation } from \"react-router\";\nimport { ListProps, ListView, ListViewProps } from \"@/components/admin/list\";\nimport { capitalize, singularize } from \"inflection\";\nimport { DataTable } from \"@/components/admin/data-table\";\nimport { ArrayField } from \"@/components/admin/array-field\";\nimport { BadgeField } from \"@/components/admin/badge-field\";\nimport { ReferenceField } from \"@/components/admin/reference-field\";\nimport { SingleFieldList } from \"@/components/admin/single-field-list\";\nimport { ReferenceArrayField } from \"@/components/admin/reference-array-field\";\n\nexport const ListGuesser = <RecordType extends RaRecord = RaRecord>(\n  props: Omit<ListProps, \"children\"> & { enableLog?: boolean },\n) => {\n  const {\n    debounce,\n    disableAuthentication,\n    disableSyncWithLocation,\n    exporter,\n    filter,\n    filterDefaultValues,\n    perPage,\n    resource,\n    sort,\n    ...rest\n  } = props;\n  // force a rerender of this component when any list parameter changes\n  // otherwise the ListBase won't be rerendered when the sort changes\n  // and the following check won't be performed\n  useLocation();\n  // keep previous data, unless the resource changes\n  const resourceFromContext = useResourceContext(props);\n  const previousResource = usePrevious(resourceFromContext);\n  const keepPreviousData = previousResource === resourceFromContext;\n  return (\n    <ListBase<RecordType>\n      debounce={debounce}\n      disableAuthentication={disableAuthentication}\n      disableSyncWithLocation={disableSyncWithLocation}\n      exporter={exporter}\n      filter={filter}\n      filterDefaultValues={filterDefaultValues}\n      perPage={perPage}\n      resource={resource}\n      queryOptions={{\n        placeholderData: (previousData) =>\n          keepPreviousData ? previousData : undefined,\n      }}\n      sort={sort}\n    >\n      <ListViewGuesser {...rest} />\n    </ListBase>\n  );\n};\n\nconst ListViewGuesser = (\n  props: Omit<ListViewProps, \"children\"> & { enableLog?: boolean },\n) => {\n  const { data } = useListContext();\n  const resource = useResourceContext();\n  const [child, setChild] = useState<React.ReactElement | null>(null);\n  const { enableLog = process.env.NODE_ENV === \"development\", ...rest } = props;\n\n  useEffect(() => {\n    setChild(null);\n  }, [resource]);\n\n  useEffect(() => {\n    if (data && data.length > 0 && !child) {\n      const inferredElements = getElementsFromRecords(data, listFieldTypes);\n      const inferredChild = new InferredElement(\n        listFieldTypes.table,\n        null,\n        inferredElements,\n      );\n      const inferredChildElement = inferredChild.getElement();\n      const representation = inferredChild.getRepresentation();\n      if (!resource) {\n        throw new Error(\n          \"Cannot use <ListGuesser> outside of a ResourceContext\",\n        );\n      }\n      if (!inferredChildElement || !representation) {\n        return;\n      }\n\n      setChild(inferredChildElement);\n\n      const components = [\"List\"]\n        .concat(\n          Array.from(\n            new Set(\n              Array.from(representation.matchAll(/<([^/\\s\\\\.>]+)/g))\n                .map((match) => match[1])\n                .filter((component) => component !== \"span\"),\n            ),\n          ),\n        )\n        .sort();\n\n      if (enableLog) {\n        // eslint-disable-next-line no-console\n        console.log(\n          `Guessed List:\n\n${components\n  .map(\n    (component) =>\n      `import { ${component} } from \"@/components/admin/${kebabCase(\n        component,\n      )}\";`,\n  )\n  .join(\"\\n\")}\n\nexport const ${capitalize(singularize(resource))}List = () => (\n    <List>\n${inferredChild.getRepresentation()}\n    </List>\n);`,\n        );\n      }\n    }\n  }, [data, child, resource, enableLog]);\n\n  return <ListView {...rest}>{child}</ListView>;\n};\n\nconst listFieldTypes = {\n  table: {\n    component: (props: any) => {\n      return <DataTable {...props} />;\n    },\n    representation: (\n      _props: any,\n      children: { getRepresentation: () => string }[],\n    ) =>\n      `        <DataTable>\n${children\n  .map((child) => `            ${child.getRepresentation()}`)\n  .join(\"\\n\")}\n        </DataTable>`,\n  },\n\n  reference: {\n    component: (props: any) => (\n      <DataTable.Col source={props.source}>\n        <ReferenceField source={props.source} reference={props.reference} />\n      </DataTable.Col>\n    ),\n    representation: (props: any) =>\n      `<DataTable.Col source=\"${props.source}\">\n                <ReferenceField source=\"${props.source}\" reference=\"${props.reference}\" />\n            </DataTable.Col>`,\n  },\n  array: {\n    component: ({ children, ...props }: any) => {\n      const childrenArray = React.Children.toArray(children);\n      return (\n        <DataTable.Col source={props.source}>\n          <ArrayField source={props.source}>\n            <SingleFieldList>\n              <BadgeField\n                source={\n                  childrenArray.length > 0 &&\n                  React.isValidElement(childrenArray[0]) &&\n                  (childrenArray[0].props as any).source\n                }\n              />\n            </SingleFieldList>\n          </ArrayField>\n        </DataTable.Col>\n      );\n    },\n    representation: (props: any, children: any) =>\n      `<DataTable.Col source=\"${props.source}\">\n               <ArrayField source=\"${props.source}\">\n                    <SingleFieldList>\n                        <BadgeField source=\"${\n                          children.length > 0 && children[0].getProps().source\n                        }\" />\n                   </SingleFieldList>\n                </ArrayField>\n            </DataTable.Col>`,\n  },\n  referenceArray: {\n    component: (props: any) => (\n      <DataTable.Col {...props}>\n        <ReferenceArrayField {...props} />\n      </DataTable.Col>\n    ),\n    representation: (props: any) =>\n      `<DataTable.Col source=\"${props.source}\">\n                <ReferenceArrayField source=\"${props.source}\" reference=\"${props.reference}\" />\n            </DataTable.Col>`,\n  },\n  string: {\n    component: DataTable.Col,\n    representation: (props: any) =>\n      `<DataTable.Col source=\"${props.source}\" />`,\n  },\n};\n\nconst kebabCase = (name: string) => {\n  return name\n    .replace(/([a-z])([A-Z])/g, \"$1-$2\")\n    .replace(/([A-Z])([A-Z][a-z])/g, \"$1-$2\")\n    .toLowerCase();\n};\n",
      "type": "components:ui"
    }
  ],
  "tailwind": {
    "config": {}
  },
  "betterQuery": {
    "operations": [
      "list"
    ],
    "hook": "useQuery(\"resource\").list()",
    "example": "const { data } = useQuery(\"resource\").list();\n// Use in component"
  }
}