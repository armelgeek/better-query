{
	"name": "radio-button-group-input",
	"type": "components:ui",
	"category": "forms",
	"description": "Radio button group for single selection",
	"dependencies": {
		"shadcn": ["form", "input", "label", "button"],
		"npm": []
	},
	"registryDependencies": [],
	"files": [
		{
			"path": "components/admin/radio-button-group-input.tsx",
			"content": "import * as React from \"react\";\nimport {\n  type ChoicesProps,\n  type InputProps,\n  FieldTitle,\n  useChoices,\n  useChoicesContext,\n  useInput,\n} from \"ra-core\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  FormField,\n  FormControl,\n  FormLabel,\n  FormError,\n} from \"@/components/admin/form\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { InputHelperText } from \"@/components/admin/input-helper-text\";\n\nexport const RadioButtonGroupInput = (inProps: RadioButtonGroupInputProps) => {\n  const {\n    choices: choicesProp,\n    isFetching: isFetchingProp,\n    isLoading: isLoadingProp,\n    isPending: isPendingProp,\n    resource: resourceProp,\n    source: sourceProp,\n\n    format,\n    onBlur,\n    onChange,\n    parse,\n    validate,\n    disabled,\n    readOnly,\n\n    optionText,\n    optionValue = \"id\",\n    translateChoice,\n    disableValue = \"disabled\",\n\n    className,\n    helperText,\n    label,\n    row,\n    ...rest\n  } = inProps;\n\n  const {\n    allChoices,\n    isPending,\n    error: fetchError,\n    resource,\n    source,\n  } = useChoicesContext({\n    choices: choicesProp,\n    isFetching: isFetchingProp,\n    isLoading: isLoadingProp,\n    isPending: isPendingProp,\n    resource: resourceProp,\n    source: sourceProp,\n  });\n\n  if (source === undefined) {\n    throw new Error(\n      `If you're not wrapping the RadioButtonGroupInput inside a ReferenceArrayInput, you must provide the source prop`,\n    );\n  }\n\n  if (!isPending && !fetchError && allChoices === undefined) {\n    throw new Error(\n      `If you're not wrapping the RadioButtonGroupInput inside a ReferenceArrayInput, you must provide the choices prop`,\n    );\n  }\n\n  const { id, field, isRequired } = useInput({\n    format,\n    onBlur,\n    onChange,\n    parse,\n    resource,\n    source,\n    validate,\n    disabled,\n    readOnly,\n    ...rest,\n  });\n\n  const { getChoiceText, getChoiceValue, getDisableValue } = useChoices({\n    optionText,\n    optionValue,\n    translateChoice,\n    disableValue,\n  });\n\n  if (isPending) {\n    return <Skeleton className=\"w-full h-9\" />;\n  }\n\n  return (\n    <FormField id={id} className={className} name={field.name}>\n      {label && (\n        <FormLabel>\n          <FieldTitle\n            label={label}\n            source={source}\n            resource={resource}\n            isRequired={isRequired}\n          />\n        </FormLabel>\n      )}\n\n      <FormControl>\n        <RadioGroup\n          {...rest}\n          value={field.value || \"\"}\n          onValueChange={field.onChange}\n          className={cn(\"flex\", row ? \"flex-row gap-4\" : \"flex-col gap-2\")}\n          disabled={disabled || readOnly}\n        >\n          {allChoices?.map((choice) => {\n            const value = getChoiceValue(choice);\n            const isDisabled = disabled || readOnly || getDisableValue(choice);\n\n            return (\n              <div key={value} className=\"flex items-center space-x-2\">\n                <RadioGroupItem\n                  value={value}\n                  id={`${id}-${value}`}\n                  disabled={isDisabled}\n                />\n                <Label\n                  htmlFor={`${id}-${value}`}\n                  className={cn(\n                    \"text-sm font-normal cursor-pointer\",\n                    isDisabled && \"opacity-50 cursor-not-allowed\",\n                  )}\n                >\n                  {getChoiceText(choice)}\n                </Label>\n              </div>\n            );\n          })}\n        </RadioGroup>\n      </FormControl>\n      <InputHelperText helperText={helperText} />\n      <FormError />\n    </FormField>\n  );\n};\n\nexport interface RadioButtonGroupInputProps\n  extends Partial<InputProps>,\n    ChoicesProps,\n    Omit<\n      React.ComponentProps<typeof RadioGroup>,\n      \"defaultValue\" | \"onBlur\" | \"onChange\" | \"type\"\n    > {\n  row?: boolean;\n}\n",
			"type": "components:ui"
		}
	],
	"tailwind": {
		"config": {}
	}
}
