{
  "name": "number-field",
  "type": "components:ui",
  "category": "data-display",
  "description": "Display numeric data with formatting options",
  "dependencies": {
    "shadcn": [
      "table",
      "card"
    ],
    "npm": []
  },
  "registryDependencies": [],
  "files": [
    {
      "path": "components/admin/number-field.tsx",
      "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { HTMLAttributes } from \"react\";\nimport { useFieldValue, useTranslate } from \"ra-core\";\nimport { FieldProps } from \"@/lib/field.type.ts\";\n\nexport const NumberField = <\n  RecordType extends Record<string, any> = Record<string, any>,\n>({\n  defaultValue,\n  source,\n  record,\n  empty,\n  transform = defaultTransform,\n  locales,\n  options,\n  ...rest\n}: NumberFieldProps<RecordType>) => {\n  let value = useFieldValue({ defaultValue, source, record });\n  const translate = useTranslate();\n\n  if (value == null) {\n    if (!empty) {\n      return null;\n    }\n\n    return (\n      <span {...rest}>\n        {typeof empty === \"string\" ? translate(empty, { _: empty }) : empty}\n      </span>\n    );\n  }\n\n  if (transform) {\n    value = transform(value);\n  }\n\n  return (\n    <span {...rest}>\n      {hasNumberFormat && typeof value === \"number\"\n        ? value.toLocaleString(locales, options)\n        : value}\n    </span>\n  );\n};\n\nexport interface NumberFieldProps<\n  RecordType extends Record<string, any> = Record<string, any>,\n> extends FieldProps<RecordType>,\n    HTMLAttributes<HTMLSpanElement> {\n  locales?: string | string[];\n  options?: object;\n  transform?: (value: any) => number;\n}\n\nconst defaultTransform = (value: any) =>\n  value && typeof value === \"string\" && !isNaN(value as any) ? +value : value;\n\nconst hasNumberFormat = !!(\n  typeof Intl === \"object\" &&\n  Intl &&\n  typeof Intl.NumberFormat === \"function\"\n);\n",
      "type": "components:ui"
    }
  ],
  "tailwind": {
    "config": {}
  }
}