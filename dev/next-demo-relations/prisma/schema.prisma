// Prisma schema demonstrating various relationship types:
// - hasMany: User → Todos, Projects, Comments
// - belongsTo: Todo → User, Project, Priority
// - belongsToMany: Todo ↔ Tags (through junction table)
// - Self-referential: Todo → Subtasks

datasource db {
  provider = "sqlite"
  url      = "file:./prisma-demo.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String
  avatar    String?
  role      String    @default("user") // 'admin', 'user', 'guest'
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  todos     Todo[]
  projects  Project[]
  comments  Comment[]
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      String    @default("active") // 'active', 'archived', 'completed'
  ownerId     String
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  owner User  @relation(fields: [ownerId], references: [id])
  todos Todo[]
}

model Priority {
  id        String   @id @default(cuid())
  name      String
  level     Int      // 1-5
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  todos Todo[]
}

model Todo {
  id          String    @id @default(cuid())
  title       String
  description String?
  completed   Boolean   @default(false)
  userId      String
  projectId   String?
  priorityId  String?
  parentId    String?   // Self-referential for subtasks
  sortOrder   Int       @default(0)
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  user     User      @relation(fields: [userId], references: [id])
  project  Project?  @relation(fields: [projectId], references: [id])
  priority Priority? @relation(fields: [priorityId], references: [id])
  
  // Self-referential relation
  parent   Todo?  @relation("TodoSubtasks", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subtasks Todo[] @relation("TodoSubtasks")
  
  // One-to-many
  comments Comment[]
  
  // Many-to-many
  todoTags TodoTag[]
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  todoTags TodoTag[]
}

model TodoTag {
  id        String   @id @default(cuid())
  todoId    String
  tagId     String
  createdAt DateTime @default(now())
  
  // Relations
  todo Todo @relation(fields: [todoId], references: [id])
  tag  Tag  @relation(fields: [tagId], references: [id])
  
  @@unique([todoId, tagId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  todoId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  todo Todo @relation(fields: [todoId], references: [id])
  user User @relation(fields: [userId], references: [id])
}
